{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "help@almabase.com",
      "name": "Almabase Support",
      "url": "https://docs.almabase.com"
    },
    "description": "Almabase is world's most loved alumni management software to build alumni-centric programs to increase participation, donor engagement, and host engaging online communities.\n",
    "title": "Almabase",
    "version": "1.0",
    "x-ms-api-annotation": {
      "status": "Preview"
    }
  },
  "host": "api.almabaseapp.com",
  "basePath": "/api/",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "security": [
    {
      "API Key": []
    }
  ],
  "securityDefinitions": {
    "API Key": {
      "in": "header",
      "name": "X-API-ACCESS-TOKEN",
      "type": "apiKey"
    }
  },
  "x-ms-connector-metadata": [
    {
      "propertyName": "Website",
      "propertyValue": "https://almabase.com"
    },
    {
      "propertyName": "Privacy policy",
      "propertyValue": "https://www.almabase.com/ecloud-privacy-policy"
    },
    {
      "propertyName": "Categories",
      "propertyValue": "Sales and CRM;Productivity"
    }
  ],
  "definitions": {
    "v1.FormApi.FormEntryCreatedOrUpdatedWebhookRequest": {
      "properties": {
        "callback_url": {
          "description": "Callback URL",
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-summary": "Callback URL",
          "x-ms-visibility": "internal"
        },
        "events": {
          "default": "com.almabase.customforms.customformentry.created",
          "description": "The list of events to trigger the flow.",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetFormEntryMetadataWebhookEvents"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetFormEntryMetadataWebhookEvents",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "When",
          "x-ms-visibility": "important"
        },
        "object_id": {
          "description": "System generated ID to uniquely identify a form.",
          "format": "int32",
          "type": "integer",
          "x-ms-dynamic-values": {
            "operationId": "ListForms",
            "parameters": {
              "fields": [
                "id",
                "title"
              ]
            },
            "value-path": "id",
            "value-title": "title"
          },
          "x-ms-summary": "Form",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "object_id",
        "events",
        "callback_url"
      ],
      "type": "object"
    },
    "v1.FormApi.FormEntryWebhookResponse": {
      "description": "Entry webhook schema in OpenAPI 2.0 format",
      "properties": {
        "properties": {
          "properties": {
            "data": {
              "description": "Form entry webhook data schema",
              "type": "object"
            },
            "time": {
              "description": "The event time.",
              "format": "date-time",
              "type": "string",
              "x-ms-summary": "Event Triggered At"
            },
            "type": {
              "description": "The event type.",
              "enum": [
                "com.almabase.customforms.customformentry.created",
                "com.almabase.customforms.customformentry.updated"
              ],
              "type": "string",
              "x-ms-summary": "Triggered Event Type"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "v1.FormApi.FormRead": {
      "description": "Form",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a form.",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "title": {
          "description": "The name of the form",
          "type": "string",
          "x-ms-summary": "Form Name"
        }
      },
      "type": "object"
    },
    "v1.FormApi.FormEntryAdd": {
      "description": "Entry webhook schema in OpenAPI 2.0 (swagger) format",
      "type": "object"
    },
    "v1.GivingApi.GiftWebhookRecordRead": {
      "description": "Record",
      "properties": {
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "first_name": {
          "description": "First name of the mapped record",
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "id": {
          "description": "System generated ID to uniquely identify a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_registered": {
          "description": "Indicate if the mapped record or donor registered on Almabase",
          "type": "boolean",
          "x-ms-summary": "Is Donor Registered on Almabase?"
        },
        "last_name": {
          "description": "Last name of the mapped record",
          "type": "string",
          "x-ms-summary": "Last Name"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.GiftSucceededOrFailedWebhookRequest": {
      "properties": {
        "callback_url": {
          "description": "callback_url",
          "title": "Callback URL",
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "events": {
          "default": "com.almabase.giving.gift.succeeded",
          "description": "The list of events to trigger the flow.",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetGiftMetadataWebhookEvents"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetGiftMetadataWebhookEvents",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "When",
          "x-ms-visibility": "important"
        },
        "object_id": {
          "description": "System generated ID to uniquely identify a giving page.",
          "format": "int32",
          "type": "integer",
          "x-ms-dynamic-values": {
            "operationId": "ListGivingPages",
            "parameters": {
              "fields": [
                "id",
                "name"
              ]
            },
            "value-path": "id",
            "value-title": "name"
          },
          "x-ms-summary": "Giving Page",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "events",
        "callback_url"
      ],
      "type": "object"
    },
    "v1.GivingApi.GiftWebhookResponse": {
      "properties": {
        "data": {
          "description": "The event data.",
          "properties": {
            "amount": {
              "description": "The gift amount with two decimals.",
              "example": "10.00",
              "type": "string",
              "x-ms-summary": "Amount"
            },
            "completed_at": {
              "description": "The date when the status of the gift is marked as completed.",
              "format": "date-time",
              "type": "string",
              "x-ms-summary": "Date"
            },
            "email": {
              "description": "Email ID used by the donor for the gift.",
              "format": "email",
              "type": "string",
              "x-ms-summary": "Donor Email"
            },
            "external_database_id": {
              "description": "A system assigned unique ID for the gift by the external database.\n",
              "type": "string",
              "x-ms-summary": "External Database ID",
              "x-ms-visibility": "advanced"
            },
            "id": {
              "description": "System generated ID to uniquely identify a gift.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "ID"
            },
            "is_email_new": {
              "description": "Indicates if the email provided by donor already exists on Almabase records.",
              "type": "boolean",
              "x-ms-summary": "Is New Email?"
            },
            "mapped_profile": {
              "description": "Mapped Record on Almabase.",
              "properties": {
                "schema": {
                  "$ref": "#/definitions/v1.GivingApi.GiftWebhookRecordRead"
                }
              },
              "type": "object",
              "x-ms-summary": "Mapped Record"
            },
            "mode": {
              "description": "Mode of the gift.",
              "type": "string",
              "x-ms-summary": "Mode"
            },
            "name": {
              "description": "Full name of the donor.",
              "type": "string",
              "x-ms-summary": "Donor Name"
            },
            "page": {
              "description": "Giving Page associated with the Gift",
              "properties": {
                "id": {
                  "description": "System generated ID to uniquely identify a giving page.",
                  "format": "int32",
                  "type": "integer",
                  "x-ms-summary": "ID"
                },
                "name": {
                  "description": "Name of the associated giving page",
                  "type": "string",
                  "x-ms-summary": "Giving Page Name"
                }
              },
              "type": "object",
              "x-ms-summary": "Giving Page"
            },
            "status": {
              "description": "Status of the gift.",
              "type": "string",
              "x-ms-summary": "Status"
            }
          },
          "type": "object",
          "x-ms-summary": "Gift"
        },
        "time": {
          "description": "The event time.",
          "type": "string",
          "x-ms-summary": "Event Triggered At"
        },
        "type": {
          "description": "The event type.",
          "type": "string",
          "x-ms-summary": "Event Type"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.GooglePlace": {
      "properties": {
        "coordinates": {
          "type": "string"
        },
        "gpid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "title": "GooglePlace",
      "type": "object"
    },
    "v1.GivingApi.FieldEntry": {
      "properties": {
        "custom_data": {
          "type": "object"
        },
        "display_value": {
          "type": "string"
        },
        "field_id": {
          "type": "string"
        },
        "field_type": {
          "type": "string"
        },
        "google_place": {
          "$ref": "#/definitions/v1.GivingApi.GooglePlace"
        },
        "label": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "field_id"
      ],
      "title": "FieldEntry",
      "type": "object"
    },
    "v1.GivingApi.FormEntryAddOrEdit": {
      "properties": {
        "entry_time": {
          "format": "date-time",
          "type": "string"
        },
        "field_entries": {
          "items": {
            "$ref": "#/definitions/v1.GivingApi.FieldEntry"
          },
          "type": "array"
        },
        "form_id": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "user": {
          "properties": {
            "email": {
              "maxLength": 254,
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "form_id",
        "field_entries"
      ],
      "title": "FormEntry",
      "type": "object"
    },
    "v1.GivingApi.FormFieldRead": {
      "description": "Form Field",
      "properties": {
        "display_value": {
          "description": "The formatted value entered by responders. e.g. Name of the File Upload.",
          "type": "string",
          "x-ms-summary": "Value"
        },
        "label": {
          "description": "The question/form field name on the form",
          "type": "string",
          "x-ms-summary": "Question/Form Field Name"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.FundAddOrEdit": {
      "description": "The fund associated with the gift split.",
      "properties": {
        "external_database_id": {
          "description": "A system assigned unique ID for the fund by the external database. e.g. System Record ID for Raiser Edge NXT, Object Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "is_default": {
          "default": false,
          "description": "Indicates to associated all the splits to this fund if no other funds are defined on Giving Page.",
          "type": "boolean",
          "x-ms-summary": "Is default fund?"
        },
        "is_other_fund": {
          "default": false,
          "description": "Indicates that the donors of this fund have given custom fund name.",
          "type": "boolean",
          "x-ms-summary": "Is Other Fund?",
          "x-ms-visibility": "advanced"
        },
        "name": {
          "description": "Name of the fund",
          "type": "string",
          "x-ms-summary": "Fund Name"
        }
      },
      "required": [
        "name"
      ],
      "type": "object",
      "x-ms-summary": "Fund"
    },
    "v1.GivingApi.FundRead": {
      "description": "The fund associated with the gift split.",
      "properties": {
        "external_database_id": {
          "description": "A system assigned unique ID for the fund by the external database. e.g. System Record ID for Raiser Edge NXT, Object Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "external_database_lookup_id": {
          "description": "Lookup Name of the fund",
          "type": "string",
          "x-ms-summary": "Lookup Name"
        },
        "id": {
          "description": "System generated ID to uniquely identify a fund.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_default": {
          "description": "Indicates to associated all the splits to this fund if no other funds are defined on Giving Page.",
          "type": "boolean",
          "x-ms-summary": "Is default fund?"
        },
        "is_other_fund": {
          "description": "Indicates that the donors of this fund have given custom fund name.",
          "type": "boolean",
          "x-ms-summary": "Is Other Fund?"
        },
        "name": {
          "description": "Name of the fund",
          "type": "string",
          "x-ms-summary": "Name"
        }
      },
      "type": "object",
      "x-ms-summary": "Fund"
    },
    "v1.GivingApi.GiftAdd": {
      "description": "Gift",
      "properties": {
        "amount": {
          "description": "The gift amount with two decimals.",
          "example": "10.00",
          "type": "string",
          "x-ms-summary": "Gift Amount",
          "x-ms-visibility": "important"
        },
        "batch_number": {
          "description": "The batch number of the gift.",
          "type": "string",
          "x-ms-summary": "Batch Number",
          "x-ms-visibility": "advanced"
        },
        "completed_at": {
          "description": "The date when the status of the gift is marked as completed.",
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Gift Date",
          "x-ms-visibility": "important"
        },
        "currency": {
          "default": 1,
          "description": "Currency used by the donor for the gift.",
          "format": "int32",
          "type": "integer",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetGiftMetadataGiftCurrencies"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetGiftMetadataGiftCurrencies",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "Currency",
          "x-ms-visibility": "important"
        },
        "donor_address_line1": {
          "description": "The address line 1 used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Line 1",
          "x-ms-visibility": "important"
        },
        "donor_address_line2": {
          "description": "The address line 2 used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Line 2",
          "x-ms-visibility": "important"
        },
        "donor_city_place": {
          "$ref": "#/definitions/v1.GivingApi.LocationAdd"
        },
        "donor_email": {
          "description": "Email ID used by the donor for the gift.",
          "format": "email",
          "type": "string",
          "x-ms-summary": "Donor Email",
          "x-ms-visibility": "important"
        },
        "donor_name": {
          "description": "Full name of the donor.",
          "type": "string",
          "x-ms-summary": "Donor Name",
          "x-ms-visibility": "important"
        },
        "donor_phone_number": {
          "description": "Phone Number used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Phone Number",
          "x-ms-visibility": "advanced"
        },
        "donor_zip_code": {
          "description": "The zip code of the address used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Zip Code",
          "x-ms-visibility": "important"
        },
        "exclude_from_leaderboard": {
          "default": false,
          "description": "Is hidden from Leaderboard?",
          "type": "boolean",
          "x-ms-summary": "Is hidden from Leaderboard?",
          "x-ms-visibility": "advanced"
        },
        "external_database_id": {
          "description": "A system assigned unique ID for the gift by the external database.\n",
          "type": "string",
          "x-ms-summary": "External Database ID",
          "x-ms-visibility": "advanced"
        },
        "honor_message": {
          "description": "A message for a gift tribute.",
          "type": "string",
          "x-ms-summary": "Tribute Message",
          "x-ms-visibility": "advanced"
        },
        "honor_prefix": {
          "description": "A prefix for a gift tribute. Available options are in_honor_of, in_memory_of, in_support_of",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetGiftMetadataGiftHonorPrefix"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetGiftMetadataGiftHonorPrefix",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "Tribute Prefix",
          "x-ms-visibility": "advanced"
        },
        "is_anonymous": {
          "description": "Indicates the wish of donor be be anonymous to other donors for this gift.",
          "type": "boolean",
          "x-ms-summary": "Is Anonymous?",
          "x-ms-visibility": "important"
        },
        "mode": {
          "description": "Mode of Payment, either online or offline.",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetGiftMetadataGiftModes"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetGiftMetadataGiftModes",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "Mode of Payment"
        },
        "note": {
          "description": "The note text.",
          "type": "string",
          "x-ms-summary": "Note",
          "x-ms-visibility": "advanced"
        },
        "other_fund_name": {
          "description": "When the donor selects a fund that's marked as is_other_fund, they add a custom fund name to attribute the gift.\n",
          "type": "string",
          "x-ms-summary": "Other Fund Name",
          "x-ms-visibility": "advanced"
        },
        "page": {
          "description": "The giving page associated with the gift.",
          "properties": {
            "id": {
              "description": "System generated ID to uniquely identify a giving page.",
              "format": "int32",
              "type": "integer",
              "x-ms-dynamic-values": {
                "operationId": "ListGivingPages",
                "parameters": {
                  "fields": [
                    "id",
                    "name"
                  ]
                },
                "value-path": "id",
                "value-title": "name"
              },
              "x-ms-summary": "Giving Page",
              "x-ms-visibility": "important"
            }
          },
          "type": "object",
          "x-ms-visibility": "important"
        },
        "pre_payment_form_entry": {
          "$ref": "#/definitions/v1.GivingApi.FormEntryAddOrEdit"
        },
        "profile": {
          "$ref": "#/definitions/v1.GivingApi.RecordAddOrEdit"
        },
        "splits": {
          "description": "The splits associated with the gift.",
          "items": {
            "$ref": "#/definitions/v1.GivingApi.GiftSplitAddOrEdit"
          },
          "type": "array",
          "x-ms-summary": "Splits",
          "x-ms-visibility": "important"
        },
        "status": {
          "default": "completed",
          "description": "Status of the gift.",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetGiftMetadataGiftStatus"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetGiftMetadataGiftStatus",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "Status",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "donor_name",
        "completed_at",
        "amount",
        "status",
        "mode",
        "currency",
        "splits",
        "donor_email",
        "page"
      ],
      "type": "object"
    },
    "v1.GivingApi.GiftEdit": {
      "description": "Gift",
      "properties": {
        "batch_number": {
          "description": "The batch number of the gift.",
          "type": "string",
          "x-ms-summary": "Batch Number",
          "x-ms-visibility": "advanced"
        },
        "donor_address_line1": {
          "description": "The address line 1 used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Line 1",
          "x-ms-visibility": "important"
        },
        "donor_address_line2": {
          "description": "The address line 2 used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Line 2",
          "x-ms-visibility": "important"
        },
        "donor_city_place": {
          "$ref": "#/definitions/v1.GivingApi.LocationAdd"
        },
        "donor_name": {
          "description": "Full name of the donor.",
          "type": "string",
          "x-ms-summary": "Donor Name",
          "x-ms-visibility": "important"
        },
        "donor_phone_number": {
          "description": "Phone Number used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Phone Number",
          "x-ms-visibility": "advanced"
        },
        "donor_zip_code": {
          "description": "The zip code of the address used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Zip Code",
          "x-ms-visibility": "important"
        },
        "exclude_from_leaderboard": {
          "description": "Is hidden from Leaderboard?",
          "type": "boolean",
          "x-ms-summary": "Is hidden from Leaderboard?",
          "x-ms-visibility": "advanced"
        },
        "external_database_id": {
          "description": "A system assigned unique ID for the gift by the external database.\n",
          "type": "string",
          "x-ms-summary": "External Database ID",
          "x-ms-visibility": "advanced"
        },
        "honor_message": {
          "description": "A message for a gift tribute.",
          "type": "string",
          "x-ms-summary": "Tribute Message",
          "x-ms-visibility": "advanced"
        },
        "honor_prefix": {
          "description": "A prefix for a gift tribute. Available options are in_honor_of, in_memory_of, in_support_of",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetGiftMetadataGiftHonorPrefix"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetGiftMetadataGiftHonorPrefix",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "Tribute Prefix",
          "x-ms-visibility": "advanced"
        },
        "is_anonymous": {
          "description": "Indicates the wish of donor be be anonymous to other donors for this gift.",
          "type": "boolean",
          "x-ms-summary": "Is Anonymous?",
          "x-ms-visibility": "important"
        },
        "note": {
          "description": "The note text.",
          "type": "string",
          "x-ms-summary": "Note",
          "x-ms-visibility": "advanced"
        },
        "other_fund_name": {
          "description": "When the donor selects a fund that's marked as is_other_fund, they add a custom fund name to attribute the gift.\n",
          "type": "string",
          "x-ms-summary": "Other Fund Name",
          "x-ms-visibility": "advanced"
        },
        "page": {
          "description": "The giving page associated with the gift.",
          "properties": {
            "id": {
              "description": "System generated ID to uniquely identify a giving page.",
              "format": "int32",
              "type": "integer",
              "x-ms-dynamic-values": {
                "operationId": "ListGivingPages",
                "parameters": {
                  "fields": [
                    "id",
                    "name"
                  ]
                },
                "value-path": "id",
                "value-title": "name"
              },
              "x-ms-summary": "Giving Page",
              "x-ms-visibility": "important"
            }
          },
          "type": "object",
          "x-ms-visibility": "important"
        },
        "profile": {
          "$ref": "#/definitions/v1.GivingApi.RecordAddOrEdit"
        },
        "splits": {
          "description": "The splits associated with the gift.",
          "items": {
            "$ref": "#/definitions/v1.GivingApi.GiftSplitAddOrEdit"
          },
          "type": "array",
          "x-ms-summary": "Splits",
          "x-ms-visibility": "important"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.GiftRead": {
      "description": "Gift",
      "properties": {
        "amount": {
          "description": "The gift amount with two decimals.",
          "example": "10.00",
          "type": "string",
          "x-ms-summary": "Gift Amount"
        },
        "batch_number": {
          "description": "The batch number of the gift.",
          "type": "string",
          "x-ms-summary": "Batch Number",
          "x-ms-visibility": "advanced"
        },
        "completed_at": {
          "description": "The date when the status of the gift is marked as completed.",
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Gift Date"
        },
        "currency": {
          "description": "Currency used by the donor for the gift.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Currency"
        },
        "device": {
          "description": "Identify the device used to make the gift, e.g. pc, mobile or tablet.",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "Device"
        },
        "donor_address_line1": {
          "description": "The address line 1 used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Line 1"
        },
        "donor_address_line2": {
          "description": "The address line 2 used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Line 2"
        },
        "donor_city_place": {
          "$ref": "#/definitions/v1.GivingApi.LocationRead"
        },
        "donor_email": {
          "description": "Email ID used by the donor for the gift.",
          "format": "email",
          "type": "string",
          "x-ms-summary": "Donor Email"
        },
        "donor_name": {
          "description": "Full name of the donor.",
          "type": "string",
          "x-ms-summary": "Donor Name"
        },
        "donor_phone_number": {
          "description": "Phone Number used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Phone Number"
        },
        "donor_zip_code": {
          "description": "The zip code of the address used by the donor for the gift.",
          "type": "string",
          "x-ms-summary": "Donor Address: Zip Code"
        },
        "exclude_from_leaderboard": {
          "default": false,
          "description": "Is hidden from Leaderboard?",
          "type": "boolean",
          "x-ms-summary": "Is hidden from Leaderboard?"
        },
        "external_database_id": {
          "description": "A system assigned unique ID for the gift by the external database.\n",
          "type": "string",
          "x-ms-summary": "External Database ID",
          "x-ms-visibility": "advanced"
        },
        "honor_message": {
          "description": "A message for a gift tribute.",
          "type": "string",
          "x-ms-summary": "Tribute Message"
        },
        "honor_prefix": {
          "description": "A prefix for a gift tribute. Available options are in_honor_of, in_memory_of, in_support_of",
          "enum": [
            "in_honor_of",
            "in_memory_of",
            "in_support_of"
          ],
          "type": "string",
          "x-ms-summary": "Tribute Prefix"
        },
        "id": {
          "description": "System generated ID to uniquely identify a gift.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "influencer": {
          "$ref": "#/definitions/v1.GivingApi.InfluencerRead"
        },
        "is_anonymous": {
          "description": "Indicates the wish of donor be be anonymous to other donors for this gift.",
          "type": "boolean",
          "x-ms-summary": "Is Anonymous?"
        },
        "is_donor_covered_charges": {
          "default": false,
          "description": "Indicates if the donor has opted to cover the payment gateway charges when making the this gift?",
          "type": "boolean",
          "x-ms-summary": "Has donor covered the payment gateway charges?"
        },
        "is_email_added_to_profile": {
          "description": "Indicates if the email provided by donor is added on Almabase record (irrespective of is_email_new status)\n",
          "readOnly": true,
          "type": "boolean",
          "x-ms-summary": "Is Email Added to a Record on Almabase?"
        },
        "is_email_new": {
          "description": "Indicates if the email provided by donor already exists on Almabase records.",
          "readOnly": true,
          "type": "boolean",
          "x-ms-summary": "Is New Email?"
        },
        "is_profile_mapping_ignored": {
          "default": false,
          "description": "Indicates if the record mapping should be ignored.",
          "type": "boolean",
          "x-ms-summary": "Is Mapping to a Record on Almabase Ignored?"
        },
        "mode": {
          "description": "Mode of Payment, either online or offline.",
          "enum": [
            "online",
            "offline",
            "offline_cheque",
            "offline_wire_transfer",
            "offline_cash",
            "offline_demand_draft"
          ],
          "type": "string",
          "x-ms-summary": "Mode of Payment"
        },
        "note": {
          "description": "The note text.",
          "type": "string",
          "x-ms-summary": "Note"
        },
        "other_fund_name": {
          "description": "When the donor selects a fund that's marked as is_other_fund, they add a custom fund name to attribute the gift.\n",
          "type": "string",
          "x-ms-summary": "Other Fund Name"
        },
        "page": {
          "$ref": "#/definitions/v1.GivingApi.GivingPageAssociatedWithGift"
        },
        "post_payment_form_entry": {
          "description": "The responses of the form filled after the gift payment.",
          "properties": {
            "fields": {
              "items": {
                "$ref": "#/definitions/v1.GivingApi.FormFieldRead"
              },
              "type": "array",
              "x-ms-summary": "Fields"
            },
            "id": {
              "description": "System generated ID to uniquely identify a form submission.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "Response ID"
            }
          },
          "type": "object",
          "x-ms-summary": "Post-Payment Form"
        },
        "pre_payment_form_entry": {
          "description": "The responses of the form filled prior to gift payment.",
          "properties": {
            "fields": {
              "items": {
                "$ref": "#/definitions/v1.GivingApi.FormFieldRead"
              },
              "type": "array",
              "x-ms-summary": "Fields"
            },
            "id": {
              "description": "System generated ID to uniquely identify a form submission.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "Response ID"
            }
          },
          "type": "object",
          "x-ms-summary": "Pre-Payment Form"
        },
        "profile": {
          "$ref": "#/definitions/v1.GivingApi.RecordRead"
        },
        "referrer_link": {
          "description": "The website link to identify the source of how the donor visit. e.g. Donor visited the Giving campaign from Facebook, Google, etc.\n",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "Referrer Link"
        },
        "refund_amount": {
          "description": "The amount refunded to the donor. If the whole amount is refunded, the status of the gift would be refunded instead of completed.\n",
          "type": "string",
          "x-ms-summary": "Refund Amount"
        },
        "splits": {
          "description": "The splits associated with the gift.",
          "items": {
            "$ref": "#/definitions/v1.GivingApi.GiftSplitRead"
          },
          "type": "array",
          "x-ms-summary": "Splits"
        },
        "status": {
          "description": "Status of the gift.",
          "type": "string",
          "x-ms-summary": "Status"
        },
        "transaction": {
          "$ref": "#/definitions/v1.GivingApi.TransactionRead"
        },
        "utm_campaign": {
          "description": "Used for keyword analysis. utm_campaign identify a specific product promotion or strategic campaign. e.g. annual_fund_2020\n",
          "type": "string",
          "x-ms-summary": "UTM Campaign"
        },
        "utm_medium": {
          "description": "utm_medium identify a medium such as email or cost-per- click. e.g. cpc",
          "type": "string",
          "x-ms-summary": "UTM Medium"
        },
        "utm_source": {
          "description": "utm_source identify a search engine, newsletter name, or other source. e.g. Google",
          "type": "string",
          "x-ms-summary": "UTM Source"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.GiftSplitAddOrEdit": {
      "description": "Gift Split",
      "properties": {
        "amount": {
          "description": "The amount of the gift split.",
          "type": "string",
          "x-ms-summary": "Amount"
        },
        "fund": {
          "description": "The fund associated with the gift split.",
          "properties": {
            "id": {
              "description": "System generated ID to uniquely identify a fund.",
              "format": "int32",
              "type": "integer",
              "x-ms-dynamic-values": {
                "operationId": "ListFunds",
                "parameters": {
                  "fields": [
                    "id",
                    "name"
                  ]
                },
                "value-path": "id",
                "value-title": "name"
              },
              "x-ms-summary": "Fund",
              "x-ms-visibility": "important"
            }
          },
          "required": [
            "id"
          ],
          "type": "object",
          "x-ms-summary": "Fund"
        }
      },
      "required": [
        "fund",
        "amount"
      ],
      "type": "object"
    },
    "v1.GivingApi.GiftSplitRead": {
      "description": "Gift Split",
      "properties": {
        "amount": {
          "description": "The amount of the gift split.",
          "type": "string",
          "x-ms-summary": "Amount"
        },
        "fund": {
          "$ref": "#/definitions/v1.GivingApi.FundRead"
        },
        "id": {
          "description": "System generated ID to uniquely identify a gift split.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.GivingPageAssociatedWithGift": {
      "description": "The giving page associated with the gift.",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a giving page.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "name": {
          "description": "Name of the associated Giving Page.",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "Name"
        }
      },
      "type": "object",
      "x-ms-summary": "Giving Page"
    },
    "v1.GivingApi.GivingPageRead": {
      "description": "Giving Page",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a giving page.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "name": {
          "description": "Name of the giving page",
          "type": "string",
          "x-ms-summary": "Name"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.InfluencerRead": {
      "description": "The public share link and private dashboard link",
      "properties": {
        "dashboard_url": {
          "description": "The private dashboard of the donor to monitor the number of page visits and gifts influenced by them\n",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Private Influencer Dashboard Link"
        },
        "page_share_url": {
          "description": "The public link of giving page/campaign of donor to track the influence on visits to Giving Page and the gifts.\n",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Public Share Link"
        }
      },
      "type": "object",
      "x-ms-summary": "Influencer"
    },
    "v1.GivingApi.LocationAdd": {
      "description": "The city used by the donor for the gift.",
      "properties": {
        "name": {
          "description": "The city of of the donor. Format: City Name, Short State Name, Short Country Name",
          "example": "San Francisco, CA, USA",
          "type": "string",
          "x-ms-summary": "Name: City, State, Country"
        }
      },
      "type": "object",
      "x-ms-summary": "Donor Address: Location",
      "x-ms-visibility": "important"
    },
    "v1.GivingApi.LocationRead": {
      "description": "The city used by the donor for the gift.",
      "properties": {
        "city": {
          "description": "The city of the donor",
          "example": "San Francisco",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "City"
        },
        "city_short_name": {
          "description": "The short representation of the City, e.g. SF",
          "example": "SF",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "City Short Name"
        },
        "coordinates": {
          "properties": {
            "latitude": {
              "description": "The latitude of the location",
              "example": "37.7749295",
              "readOnly": true,
              "type": "string",
              "x-ms-summary": "Latitude"
            },
            "longitude": {
              "description": "The longitude of the location",
              "example": "-122.4194155",
              "readOnly": true,
              "type": "string",
              "x-ms-summary": "Longitude"
            }
          },
          "readOnly": true,
          "type": "object"
        },
        "country": {
          "description": "The country of the donor",
          "example": "United States",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "Country"
        },
        "country_short_name": {
          "description": "The short representation of the country, e.g. US",
          "example": "US",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "Country Short Name"
        },
        "gpid": {
          "description": "The place id obtained from Google",
          "type": "string",
          "x-ms-summary": "Google Place Id"
        },
        "name": {
          "description": "The city of of the donor. Format: City Name, Short State Name, Short Country Name",
          "example": "San Francisco, CA, USA",
          "type": "string",
          "x-ms-summary": "City, State, Country"
        },
        "state": {
          "description": "The state of the donor",
          "example": "California",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "State"
        },
        "state_short_name": {
          "description": "The short representation of the state, e.g. CA",
          "example": "CA",
          "readOnly": true,
          "type": "string",
          "x-ms-summary": "State Short Name"
        }
      },
      "type": "object",
      "x-ms-summary": "Donor Address: Location"
    },
    "v1.GivingApi.PaymentAccountRead": {
      "description": "The payment account associated with the transaction, e.g. BBMS, Stripe, Paypal, etc.",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a payment account.",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "name": {
          "description": "The name of the payment account.",
          "type": "string",
          "x-ms-summary": "Name"
        },
        "type": {
          "description": "The name of the payment gateway.",
          "type": "string",
          "x-ms-summary": "Gateway"
        }
      },
      "type": "object",
      "x-ms-summary": "Payment Account"
    },
    "v1.GivingApi.RecordAddOrEdit": {
      "description": "Mapped Record on Almabase. NOTE: The gift would be automatically mapped to a record with the email address same as donor email. x-ms-summary: Mapped Record\n",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        }
      },
      "type": "object",
      "x-ms-summary": "Mapped Record",
      "x-ms-visibility": "advanced"
    },
    "v1.GivingApi.RecordRead": {
      "description": "Mapped Record on Almabase",
      "properties": {
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "first_name": {
          "description": "First name of the mapped record",
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "formatted_name": {
          "description": "Full name of the mapped record",
          "type": "string",
          "x-ms-summary": "Full Name"
        },
        "id": {
          "description": "System generated ID to uniquely identify a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_registered": {
          "description": "Indicate if the mapped record or donor registered on Almabase",
          "type": "boolean",
          "x-ms-summary": "Is Donor Registered on Almabase?"
        },
        "last_name": {
          "description": "Last name of the mapped record",
          "type": "string",
          "x-ms-summary": "Last Name"
        },
        "present_picture": {
          "description": "The url of the record picture",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Picture URL"
        },
        "profile_url": {
          "description": "The record link on Almabase",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Link"
        }
      },
      "type": "object",
      "x-ms-summary": "Mapped Record"
    },
    "v1.GivingApi.RecurringGiftAssociatedWithGift": {
      "description": "Recurring Gift",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a recurring gift.",
          "type": "integer",
          "x-ms-summary": "ID"
        }
      },
      "type": "object"
    },
    "v1.GivingApi.TransactionRead": {
      "description": "The online payment transaction associated with the gift.",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1.GivingApi.PaymentAccountRead"
        },
        "amount_charged": {
          "description": "The amount charged by the Payment Gateway and Almabase for the online transaction.",
          "type": "number",
          "x-ms-summary": "Transaction Fees (Amount Charged by Payment Gateway & Almabase)"
        },
        "amount_refunded": {
          "description": "The amount refunded for the online transaction.",
          "type": "string",
          "x-ms-summary": "Refund Amount"
        },
        "created_at": {
          "description": "The time of creating of this transaction.",
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Created at"
        },
        "currency": {
          "description": "Currency used by the donor for the online transaction.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Currency"
        },
        "failure_reason": {
          "description": "The transaction failure reason returned by the payment gateway.",
          "type": "string",
          "x-ms-summary": "Failure Reason"
        },
        "id": {
          "description": "System generated ID to uniquely identify a transaction.",
          "format": "uuid",
          "type": "string",
          "x-ms-summary": "ID"
        },
        "receipt_amount": {
          "description": "The amount after reducing charges for the online transaction.",
          "type": "string",
          "x-ms-summary": "Receipt Amount"
        },
        "status": {
          "description": "Status of the transaction. - 1 (Unprocessed) - 2 (Succeeded) - 3 (Failed) - 4 (Pending) - 5 (Error)\nNOTE: These status are associated with the status of transaction by the Payment Gateway\n",
          "enum": [
            1,
            2,
            3,
            4,
            5
          ],
          "type": "integer",
          "x-ms-summary": "Status"
        },
        "transaction_id": {
          "description": "The unique ID generated by the payment gateway to identify the transaction. e.g. Blackbaud Merchant Services (BBMS) transaction ID, or Stripe Charge ID, Paypal transaction ID\n",
          "type": "string",
          "x-ms-summary": "Payment Gateway Reference ID"
        }
      },
      "type": "object",
      "x-ms-summary": "Online Transaction"
    },
    "v1.AlmasightsApi.RecordRead": {
      "description": "Record on Almabase.",
      "properties": {
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "first_name": {
          "description": "First name of the mapped record",
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "formatted_name": {
          "description": "Full name of the mapped record",
          "type": "string",
          "x-ms-summary": "Full Name"
        },
        "id": {
          "description": "System generated ID to uniquely identify a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_registered": {
          "description": "Indicate if the mapped record or donor registered on Almabase",
          "type": "boolean",
          "x-ms-summary": "Is Donor Registered on Almabase?"
        },
        "last_name": {
          "description": "Last name of the mapped record",
          "type": "string",
          "x-ms-summary": "Last Name"
        },
        "present_picture": {
          "description": "The url of the record picture",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Picture URL"
        },
        "profile_url": {
          "description": "The record link on Almabase",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Link"
        }
      },
      "type": "object",
      "x-ms-summary": "Record",
      "x-ms-visibility": "important"
    },
    "v1.AlmasightsApi.RecordAddOrEdit": {
      "description": "Record on Almabase.",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        }
      },
      "type": "object",
      "x-ms-summary": "Record",
      "x-ms-visibility": "important"
    },
    "v1.AlmasightsApi.TouchpointCustomObjectAdd": {
      "description": "Touchpoint body to create a new touchpoint",
      "properties": {
        "email": {
          "description": "Email ID used for the activity.",
          "format": "email",
          "type": "string",
          "x-ms-summary": "Email",
          "x-ms-visibility": "important"
        },
        "mapped_profile": {
          "$ref": "#/definitions/v1.AlmasightsApi.RecordAddOrEdit"
        },
        "recorded_at": {
          "description": "The timestamp of the activity.",
          "example": "2018-03-20T09:12:28Z",
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Recorded At",
          "x-ms-visibility": "important"
        },
        "touchpoint_type": {
          "description": "Describe the activity, must start with a verd and use past tense.",
          "properties": {
            "id": {
              "format": "int32",
              "type": "integer",
              "x-ms-dynamic-list": {
                "itemTitlePath": "name",
                "itemValuePath": "id",
                "operationId": "ListTouchpointTypes",
                "parameters": {
                  "fields": {
                    "value": [
                      "id",
                      "name"
                    ]
                  },
                  "touchpoint_program": {
                    "parameterReference": "touchpoint_program"
                  }
                }
              },
              "x-ms-dynamic-values": {
                "operationId": "ListTouchpointTypes",
                "parameters": {
                  "fields": [
                    "id",
                    "name"
                  ],
                  "touchpoint_program": {
                    "parameter": "touchpoint_program"
                  }
                },
                "value-path": "id",
                "value-title": "name"
              },
              "x-ms-summary": "Type"
            }
          },
          "required": [
            "id"
          ],
          "type": "object",
          "x-ms-visibility": "important"
        },
        "trigger_type": {
          "default": "click",
          "description": "Trigger for the the activity, e.g. click, view, or search.",
          "enum": [
            "click",
            "view",
            "search"
          ],
          "example": "click",
          "type": "string",
          "x-ms-summary": "Trigger Type",
          "x-ms-visibility": "internal"
        }
      },
      "required": [
        "touchpoint_type",
        "trigger_type",
        "recorded_at"
      ],
      "type": "object"
    },
    "v1.AlmasightsApi.TouchpointCustomObjectRead": {
      "description": "Custom Touchpoint Object",
      "properties": {
        "email": {
          "description": "Email ID used for the activity.",
          "format": "email",
          "type": "string",
          "x-ms-summary": "Email",
          "x-ms-visibility": "important"
        },
        "id": {
          "description": "System generated ID to uniquely identify a custom toouchpoint object.",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_email_new": {
          "description": "Indicates if the email provided by user already exists on Almabase records.",
          "type": "boolean",
          "x-ms-summary": "Is New Email?"
        },
        "mapped_profile": {
          "$ref": "#/definitions/v1.AlmasightsApi.RecordRead"
        },
        "recorded_at": {
          "description": "The timestamp of the activity.",
          "example": "2018-03-20T09:12:28Z",
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Recorded At",
          "x-ms-visibility": "important"
        },
        "touchpoint_type": {
          "description": "Describe the activity, must start with a verd and use past tense.",
          "example": "made-a-gift",
          "type": "string",
          "x-ms-summary": "Touchpoint Type",
          "x-ms-visibility": "important"
        },
        "trigger_type": {
          "default": "click",
          "description": "Trigger for the the activity, e.g. click, view, or search.",
          "enum": [
            "click",
            "view",
            "search"
          ],
          "example": "click",
          "type": "string",
          "x-ms-summary": "Trigger Type",
          "x-ms-visibility": "internal"
        }
      },
      "required": [
        "touchpoint_type",
        "trigger_type",
        "recorded_at"
      ],
      "type": "object"
    },
    "v1.AlmasightsApi.TouchpointProgramRead": {
      "description": "Touchpoint Program",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a program.",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "name": {
          "description": "The name of the program",
          "type": "string",
          "x-ms-summary": "Program Name"
        }
      },
      "type": "object"
    },
    "v1.AlmasightsApi.TouchpointTypeRead": {
      "description": "Touchpoint Type",
      "properties": {
        "id": {
          "description": "System generated ID to uniquely identify a type.",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "name": {
          "description": "The name of the type",
          "type": "string",
          "x-ms-summary": "Touchpoint Type Name"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.LocationRead": {
      "description": "Location of the Address",
      "properties": {
        "city": {
          "description": "City name of the location",
          "type": "string",
          "x-ms-summary": "City"
        },
        "country": {
          "description": "Country name of the location",
          "type": "string",
          "x-ms-summary": "Country"
        },
        "latitude": {
          "description": "The latitude of the location",
          "example": "37.7749295",
          "format": "double",
          "type": "number",
          "x-ms-summary": "Latitude"
        },
        "longitude": {
          "description": "The longitude of the location",
          "example": "-122.4194155",
          "format": "double",
          "type": "number",
          "x-ms-summary": "Longitude"
        },
        "state": {
          "description": "State name of the location",
          "type": "string",
          "x-ms-summary": "State"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.AddressRead": {
      "description": "Address",
      "properties": {
        "line1": {
          "description": "Line 1 of the address",
          "type": "string",
          "x-ms-summary": "Line1"
        },
        "line2": {
          "description": "Line 2 of the address",
          "type": "string",
          "x-ms-summary": "Line2"
        },
        "location": {
          "description": "Location of the address",
          "properties": {
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.LocationRead"
            }
          },
          "type": "object",
          "x-ms-summary": "Location"
        },
        "zipcode": {
          "description": "Zipcode of the address",
          "type": "string",
          "x-ms-summary": "Zipcode"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.EmailChangedWebhookRequest": {
      "properties": {
        "callback_url": {
          "description": "callback_url",
          "title": "Callback URL",
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "events": {
          "default": "com.almabase.crm.email.created",
          "description": "The list of events to trigger the flow.",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetEmailMetadataWebhookEvents"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetEmailMetadataWebhookEvents",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "When",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "events",
        "callback_url"
      ],
      "type": "object"
    },
    "v1.RecordApi.EmailWebhookRecordRead": {
      "description": "Record",
      "properties": {
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "first_name": {
          "description": "First name of the mapped record",
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "id": {
          "description": "System generated ID to uniquely identify a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_registered": {
          "description": "Indicate if the mapped record registered on Almabase",
          "type": "boolean",
          "x-ms-summary": "Is record Registered on Almabase?"
        },
        "last_name": {
          "description": "Last name of the mapped record",
          "type": "string",
          "x-ms-summary": "Last Name"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.EmailWebhookResponse": {
      "properties": {
        "data": {
          "description": "The event data.",
          "properties": {
            "address": {
              "description": "Email address.",
              "format": "email",
              "type": "string",
              "x-ms-summary": "Email Address"
            },
            "id": {
              "description": "System generated ID to uniquely identify an email.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "ID"
            },
            "is_primary": {
              "description": "Indicates whether the email is primary or not.",
              "type": "boolean",
              "x-ms-summary": "Is Primary"
            },
            "profile": {
              "description": "Mapped Record on Almabase.",
              "properties": {
                "schema": {
                  "$ref": "#/definitions/v1.RecordApi.EmailWebhookRecordRead"
                }
              },
              "type": "object",
              "x-ms-summary": "Mapped Record"
            },
            "type": {
              "description": "Type of the email address (primary, personal, work, etc).",
              "type": "string",
              "x-ms-summary": "Email Type"
            }
          },
          "type": "object",
          "x-ms-summary": "Email"
        },
        "time": {
          "description": "The event time.",
          "type": "string",
          "x-ms-summary": "Event Triggered At"
        },
        "type": {
          "description": "The event type.",
          "type": "string",
          "x-ms-summary": "Event Type"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.RecordChangedWebhookRequest": {
      "properties": {
        "callback_url": {
          "description": "callback_url",
          "title": "Callback URL",
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-visibility": "internal"
        },
        "events": {
          "default": "com.almabase.crm.record.created",
          "description": "The list of events to trigger the flow.",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "title",
            "itemValuePath": "value",
            "operationId": "GetRecordMetadataWebhookEvents"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetRecordMetadataWebhookEvents",
            "value-path": "value",
            "value-title": "title"
          },
          "x-ms-summary": "When",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "events",
        "callback_url"
      ],
      "type": "object"
    },
    "v1.RecordApi.RecordWebhookResponse": {
      "properties": {
        "data": {
          "description": "The event data.",
          "properties": {
            "affiliations": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-ms-summary": "Affiliations",
              "x-ms-visibility": "advanced"
            },
            "class_year": {
              "description": "Class year of the record",
              "type": "string",
              "x-ms-summary": "Class Year",
              "x-ms-visibility": "advanced"
            },
            "email": {
              "description": "Email address.",
              "format": "email",
              "type": "string",
              "x-ms-summary": "Email Address"
            },
            "external_database_id": {
              "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
              "type": "string",
              "x-ms-summary": "External Database ID"
            },
            "first_name": {
              "description": "First name of the mapped record",
              "type": "string",
              "x-ms-summary": "First Name"
            },
            "home_address": {
              "description": "Home Address of the record",
              "properties": {
                "schema": {
                  "$ref": "#/definitions/v1.RecordApi.AddressRead"
                }
              },
              "type": "object",
              "x-ms-summary": "Home Address"
            },
            "id": {
              "description": "System generated ID to uniquely identify a record.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "ID"
            },
            "last_name": {
              "description": "Last name of the mapped record",
              "type": "string",
              "x-ms-summary": "Last Name"
            },
            "membership_expiry_date": {
              "description": "Expiry date of the membership of the record",
              "format": "date-time",
              "type": "string",
              "x-ms-summary": "Membership Expiry Date",
              "x-ms-visibility": "advanced"
            },
            "membership_type_name": {
              "description": "Name of the membership type of the record",
              "type": "string",
              "x-ms-summary": "Membership Type Name",
              "x-ms-visibility": "advanced"
            },
            "mobile_number": {
              "description": "Mobile number of the record",
              "type": "string",
              "x-ms-summary": "Mobile Number"
            },
            "office_address": {
              "description": "Office Address of the record",
              "properties": {
                "schema": {
                  "$ref": "#/definitions/v1.RecordApi.AddressRead"
                }
              },
              "type": "object",
              "x-ms-summary": "Office Address"
            },
            "office_phone_number": {
              "description": "Office phone number of the record",
              "type": "string",
              "x-ms-summary": "Office Phone Number"
            },
            "residence_phone_number": {
              "description": "Residence phone number of the record",
              "type": "string",
              "x-ms-summary": "Residence Phone Number"
            }
          },
          "type": "object",
          "x-ms-summary": "Record"
        },
        "time": {
          "description": "The event time.",
          "type": "string",
          "x-ms-summary": "Event Triggered At"
        },
        "type": {
          "description": "The event type.",
          "type": "string",
          "x-ms-summary": "Event Type"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.RecordAdd": {
      "description": "Record",
      "properties": {
        "addresses": {
          "description": "Addresses of a profile",
          "items": {
            "$ref": "#/definitions/v1.RecordApi.AddressAdd"
          },
          "type": "array",
          "x-ms-summary": "Addresses",
          "x-ms-visibility": "advanced"
        },
        "date_of_birth": {
          "description": "Date of birth.",
          "type": "string",
          "x-ms-summary": "Date of Birth",
          "x-ms-visibility": "important"
        },
        "deceased": {
          "description": "Deceased.",
          "type": "boolean",
          "x-ms-summary": "Deceased",
          "x-ms-visibility": "important"
        },
        "email_addresses": {
          "description": "List of email addresses of a profile",
          "items": {
            "$ref": "#/definitions/v1.RecordApi.EmailAddressAssociatedWithRecordAdd"
          },
          "type": "array",
          "x-ms-summary": "Email Addresses",
          "x-ms-visibility": "advanced"
        },
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID",
          "x-ms-visibility": "important"
        },
        "external_database_lookup_id": {
          "description": "A custom user-defined lookup ID for the record in the external database. e.g. Constituent ID\n",
          "type": "string",
          "x-ms-summary": "External Database Lookup ID",
          "x-ms-visibility": "advanced"
        },
        "first_name": {
          "description": "First name of the record.",
          "type": "string",
          "x-ms-summary": "First Name",
          "x-ms-visibility": "important"
        },
        "last_name": {
          "description": "Last name of the record.",
          "type": "string",
          "x-ms-summary": "Last Name",
          "x-ms-visibility": "important"
        },
        "middle_name": {
          "description": "Middle name of the record.",
          "type": "string",
          "x-ms-summary": "Middle Name",
          "x-ms-visibility": "important"
        },
        "phone_numbers": {
          "description": "List of phone numbers of a profile",
          "items": {
            "$ref": "#/definitions/v1.RecordApi.PhoneNumberAdd"
          },
          "type": "array",
          "x-ms-summary": "Phone Numbers",
          "x-ms-visibility": "advanced"
        }
      },
      "required": [
        "last_name",
        "first_name"
      ],
      "type": "object"
    },
    "v1.RecordApi.AddressAdd": {
      "description": "Address",
      "properties": {
        "line1": {
          "description": "Line 1 of the Address",
          "type": "string",
          "x-ms-summary": "Line 1",
          "x-ms-visibility": "important"
        },
        "line2": {
          "description": "Line 2 of the Address",
          "type": "string",
          "x-ms-summary": "Line 2",
          "x-ms-visibility": "important"
        },
        "location": {
          "description": "Location of the Address",
          "properties": {
            "name": {
              "description": "City,State,Country of the Location",
              "type": "string",
              "x-ms-summary": "Name",
              "x-ms-visibility": "important"
            }
          },
          "type": "object",
          "x-ms-summary": "Location"
        },
        "privacy": {
          "description": "privacy",
          "maxLength": 32,
          "type": "string",
          "x-ms-summary": "Privacy",
          "x-ms-visibility": "important"
        },
        "type": {
          "description": "Type of the number",
          "maxLength": 32,
          "type": "string",
          "x-ms-summary": "Type",
          "x-ms-visibility": "important"
        },
        "zip_code": {
          "description": "Zipcode of the Address",
          "type": "string",
          "x-ms-summary": "Zipcode",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "line1",
        "type"
      ],
      "type": "object"
    },
    "v1.RecordApi.EmailAddressAdd": {
      "description": "Email",
      "properties": {
        "address": {
          "description": "The email address",
          "format": "email",
          "maxLength": 254,
          "type": "string",
          "x-ms-summary": "Address",
          "x-ms-visibility": "important"
        },
        "is_login_email": {
          "default": true,
          "description": "Indicates if the user are allowed to login to the Platform using this email address.",
          "type": "boolean",
          "x-ms-summary": "Use for Login?",
          "x-ms-visibility": "advanced"
        },
        "is_primary": {
          "description": "A primary email is used to send the automated emails triggered by the System. It is also used to send the bulk email to the profile. It's mandatory that only one email is set as primary.\n",
          "type": "boolean",
          "x-ms-summary": "Is Primary?",
          "x-ms-visibility": "important"
        },
        "source": {
          "description": "The source indicate how the email is added to the database.",
          "maxLength": 32,
          "type": "string",
          "x-ms-summary": "Source",
          "x-ms-visibility": "advanced"
        },
        "status": {
          "default": "unknown",
          "description": "Status of the email address",
          "enum": [
            "unknown",
            "hard_bounce",
            "soft_bounce",
            "marked_spam",
            "invalid",
            "contactable"
          ],
          "type": "string",
          "x-ms-summary": "Status",
          "x-ms-visibility": "advanced"
        },
        "type": {
          "description": "The type of the email",
          "maxLength": 32,
          "type": "string",
          "x-ms-summary": "Type",
          "x-ms-visibility": "important"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.EmailAddressAssociatedWithRecordAdd": {
      "description": "Email Address",
      "properties": {
        "address": {
          "description": "The email address",
          "format": "email",
          "maxLength": 254,
          "type": "string",
          "x-ms-summary": "Address",
          "x-ms-visibility": "important"
        },
        "is_login_email": {
          "default": true,
          "description": "Indicates if the user are allowed to login to the Platform using this email address.",
          "type": "boolean",
          "x-ms-summary": "Use for Login?",
          "x-ms-visibility": "advanced"
        },
        "is_primary": {
          "description": "A primary email is used to send the automated emails triggered by the System. It is also used to send the bulk email to the profile. It's mandatory that only one email is set as primary.\n",
          "type": "boolean",
          "x-ms-summary": "Is Primary?",
          "x-ms-visibility": "important"
        },
        "source": {
          "description": "The source indicate how the email is added to the database.",
          "maxLength": 32,
          "type": "string",
          "x-ms-summary": "Source",
          "x-ms-visibility": "advanced"
        },
        "status": {
          "default": "unknown",
          "description": "Status of the email address",
          "enum": [
            "unknown",
            "hard_bounce",
            "soft_bounce",
            "marked_spam",
            "invalid",
            "contactable"
          ],
          "type": "string",
          "x-ms-summary": "Status",
          "x-ms-visibility": "advanced"
        },
        "type": {
          "description": "The type of the email",
          "maxLength": 32,
          "type": "string",
          "x-ms-summary": "Type",
          "x-ms-visibility": "important"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.EmailAddressEdit": {
      "description": "Email Address",
      "properties": {
        "is_login_email": {
          "description": "Indicates if the user are allowed to login to the Platform using this email address.",
          "type": "boolean",
          "x-ms-summary": "Use for Login?",
          "x-ms-visibility": "advanced"
        },
        "is_primary": {
          "description": "A primary email is used to send the automated emails triggered by the System. It is also used to send the bulk email to the profile. It's mandatory that only one email is set as primary.\n",
          "type": "boolean",
          "x-ms-summary": "Is Primary?",
          "x-ms-visibility": "important"
        },
        "status": {
          "description": "Status of the email address",
          "enum": [
            "unknown",
            "hard_bounce",
            "soft_bounce",
            "marked_spam",
            "invalid",
            "contactable"
          ],
          "type": "string",
          "x-ms-summary": "Status",
          "x-ms-visibility": "advanced"
        },
        "type": {
          "description": "The type of the email",
          "maxLength": 32,
          "type": "string",
          "x-ms-summary": "Type",
          "x-ms-visibility": "important"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.EmailAddressRead": {
      "description": "Email Address",
      "properties": {
        "address": {
          "description": "The email address",
          "format": "email",
          "type": "string",
          "x-ms-summary": "Address"
        },
        "id": {
          "description": "System generated ID to uniquely identify a email address of a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_engaged": {
          "description": "Indicates if a bulk email is clicked or open, or the user reply to a one to one email",
          "type": "boolean",
          "x-ms-summary": "Is Engaged?"
        },
        "is_login_email": {
          "description": "Indicates if the user are allowed to login to the Platform using this email address.",
          "type": "boolean",
          "x-ms-summary": "Use for Login?"
        },
        "is_primary": {
          "description": "A primary email is used to send the automated emails triggered by the System. It is also used to send the bulk email to the record. It's mandatory that only one email is set as primary.\n",
          "type": "boolean",
          "x-ms-summary": "Is Primary?"
        },
        "is_verified": {
          "description": "Indicate if the user has verified that they own the email.",
          "type": "boolean",
          "x-ms-summary": "Is Verified by User?"
        },
        "source": {
          "description": "The source indicate how the email is added to the database.",
          "type": "string"
        },
        "status": {
          "default": "unknown",
          "enum": [
            "unknown",
            "hard_bounce",
            "soft_bounce",
            "marked_spam",
            "invalid",
            "contactable"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the email",
          "type": "string",
          "x-ms-summary": "Type"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.PhoneNumberAdd": {
      "description": "Phone",
      "properties": {
        "number": {
          "description": "Number",
          "type": "string",
          "x-ms-summary": "Number",
          "x-ms-visibility": "important"
        },
        "privacy": {
          "description": "privacy",
          "maxLength": 32,
          "type": "string",
          "x-ms-summary": "Privacy",
          "x-ms-visibility": "important"
        },
        "type": {
          "description": "Type of the number",
          "maxLength": 32,
          "type": "string",
          "x-ms-summary": "Type",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "number",
        "type"
      ],
      "type": "object"
    },
    "v1.RecordApi.RecordEdit": {
      "description": "Record",
      "properties": {
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID",
          "x-ms-visibility": "important"
        },
        "external_database_lookup_id": {
          "description": "A custom user-defined lookup ID for the record in the external database. e.g. Constituent ID\n",
          "type": "string",
          "x-ms-summary": "External Database Lookup ID",
          "x-ms-visibility": "advanced"
        },
        "first_name": {
          "description": "First name of the record.",
          "type": "string",
          "x-ms-summary": "First Name",
          "x-ms-visibility": "important"
        },
        "last_name": {
          "description": "Last name of the record.",
          "type": "string",
          "x-ms-summary": "Last Name",
          "x-ms-visibility": "important"
        }
      },
      "type": "object"
    },
    "v1.RecordApi.RecordRead": {
      "description": "record",
      "properties": {
        "email_addresses": {
          "description": "List of email addresses of a profile",
          "items": {
            "$ref": "#/definitions/v1.RecordApi.EmailAddressRead"
          },
          "type": "array",
          "x-ms-summary": "Email Addresses"
        },
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "first_name": {
          "description": "First name of the record.",
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "formatted_name": {
          "description": "Full name of the record.",
          "type": "string",
          "x-ms-summary": "Full Name"
        },
        "id": {
          "description": "System generated ID to uniquely identify a record.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_registered": {
          "description": "Indicate if the record or donor registered on Almabase",
          "type": "boolean",
          "x-ms-summary": "Is Registered on Almabase?"
        },
        "last_name": {
          "description": "Last name of the record.",
          "type": "string",
          "x-ms-summary": "Last Name"
        },
        "present_picture": {
          "description": "The url of the record picture",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Picture URL"
        },
        "record_url": {
          "description": "The record link on Almabase",
          "format": "uri",
          "type": "string",
          "x-ms-summary": "Link"
        }
      },
      "type": "object"
    },
    "v1.EventApi.RegistrationCreatedOrUpdatedWebhookRequest": {
      "properties": {
        "callback_url": {
          "description": "Callback URL",
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-summary": "Callback URL",
          "x-ms-visibility": "internal"
        },
        "events": {
          "default": "com.almabase.eventsx.eventxregistration.*",
          "description": "The list of events to trigger the flow.",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "name",
            "itemValuePath": "value",
            "operationId": "GetregistrationMetadataWebhookEvents"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetregistrationMetadataWebhookEvents",
            "value-path": "value",
            "value-title": "name"
          },
          "x-ms-summary": "List of events",
          "x-ms-visibility": "important"
        },
        "object_id": {
          "description": "System generated ID to uniquely identify an event.",
          "format": "int32",
          "type": "integer",
          "x-ms-dynamic-values": {
            "operationId": "ListEvents",
            "parameters": {
              "fields": [
                "id",
                "name"
              ]
            },
            "value-path": "id",
            "value-title": "name"
          },
          "x-ms-summary": "Event",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "object_id",
        "events",
        "callback_url"
      ],
      "type": "object"
    },
    "v1.EventApi.EventCreatedOrUpdatedWebhookRequest": {
      "properties": {
        "callback_url": {
          "description": "Callback URL",
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-summary": "Callback URL",
          "x-ms-visibility": "internal"
        },
        "events": {
          "default": "com.almabase.eventsx.eventx.*",
          "description": "The list of events triggers to run the flow.",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "name",
            "itemValuePath": "value",
            "operationId": "GetEventMetadataWebhookEvents"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetEventMetadataWebhookEvents",
            "value-path": "value",
            "value-title": "name"
          },
          "x-ms-summary": "List of events",
          "x-ms-visibility": "important"
        },
        "object_id": {
          "description": "System generated ID to uniquely identify an event.",
          "format": "int32",
          "type": "integer",
          "x-ms-dynamic-values": {
            "operationId": "ListEvents",
            "parameters": {
              "fields": [
                "id",
                "name"
              ]
            },
            "value-path": "id",
            "value-title": "name"
          },
          "x-ms-summary": "Event",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "events",
        "callback_url"
      ],
      "type": "object"
    },
    "v1.EventApi.EventWebhookResponse": {
      "properties": {
        "data": {
          "description": "The event data.",
          "properties": {
            "description": {
              "description": "Description of the event",
              "type": "string",
              "x-ms-summary": "Description",
              "x-ms-visibility": "advanced"
            },
            "end_datetime": {
              "description": "End time of the event",
              "type": "string",
              "x-ms-summary": "End Time"
            },
            "external_database_id": {
              "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
              "type": "string",
              "x-ms-summary": "External Database ID",
              "x-ms-visibility": "advanced"
            },
            "external_registration_url": {
              "description": "The registration url of the event on an external website",
              "type": "string",
              "x-ms-summary": "External Registration Url",
              "x-ms-visibility": "advanced"
            },
            "id": {
              "description": "System generated ID to uniquely identify an event.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "ID"
            },
            "name": {
              "description": "Name of the Event.",
              "type": "string",
              "x-ms-summary": "Name"
            },
            "start_datetime": {
              "description": "Start time of the event",
              "type": "string",
              "x-ms-summary": "Start Time"
            },
            "timezone": {
              "default": "US/Central",
              "description": "Timezone of the event",
              "type": "string",
              "x-ms-summary": "Timezone",
              "x-ms-visibility": "advanced"
            },
            "venue": {
              "description": "Location of the Venue",
              "type": "string",
              "x-ms-summary": "Location"
            }
          },
          "type": "object",
          "x-ms-summary": "Event"
        },
        "source": {
          "description": "Source of the request made",
          "type": "string",
          "x-ms-summary": "Source of the request made",
          "x-ms-visibility": "important"
        },
        "time": {
          "description": "The event time.",
          "type": "string",
          "x-ms-summary": "Event Triggered At"
        },
        "type": {
          "description": "The event type.",
          "enum": [
            "com.almabase.eventsx.eventx.created",
            "com.almabase.eventsx.eventx.updated",
            "com.almabase.eventsx.eventx.*"
          ],
          "type": "string",
          "x-ms-summary": "Event Type"
        }
      },
      "type": "object"
    },
    "v1.EventApi.RegistrationWebhookEvents": {
      "properties": {
        "data": {
          "description": "The registration data.",
          "properties": {
            "amount_after_discount": {
              "description": "Amount after discount",
              "type": "string",
              "x-ms-summary": "Amount after discount"
            },
            "email": {
              "description": "Email id used to register for the event",
              "format": "email",
              "type": "string",
              "x-ms-summary": "Primary Guest email id"
            },
            "event_external_database_id": {
              "description": "RENXT External Database Event ID to uniquely identify an event.",
              "type": "string",
              "x-ms-summary": "RENXT event ID"
            },
            "event_id": {
              "description": "System generated event ID to uniquely identify associated event on almabase.",
              "type": "integer",
              "x-ms-summary": "Event ID"
            },
            "first_name": {
              "description": "Primary Guest first name",
              "type": "string",
              "x-ms-summary": "Primary Guest first name"
            },
            "gift": {
              "description": "Registration Gifts",
              "properties": {
                "amount": {
                  "description": "total amount of the gift",
                  "type": "string",
                  "x-ms-summary": "Total amount"
                },
                "completed_at": {
                  "description": "Gift completed time",
                  "format": "date-time",
                  "type": "string",
                  "x-ms-summary": "Completed time"
                },
                "external_database_id": {
                  "description": "RENXT id of the gift that was made",
                  "type": "string",
                  "x-ms-summary": "RENXT ID"
                },
                "id": {
                  "description": "The ID of the gifts",
                  "type": "number",
                  "x-ms-summary": "Almabase ID"
                },
                "mapped_profile_external_database_id": {
                  "description": "ID of the constituent that is mapped - RENXT",
                  "type": "string",
                  "x-ms-summary": "RENXT ID of the constituent that is mapped"
                },
                "mapped_profile_id": {
                  "description": "ID of the constituent that is mapped - AB",
                  "type": "integer",
                  "x-ms-summary": "Almabase ID of the constituent that is mapped"
                },
                "mode": {
                  "description": "Gift mode",
                  "type": "string",
                  "x-ms-summary": "Mode"
                },
                "splits": {
                  "description": "splits related to gifts",
                  "items": {
                    "description": "split details",
                    "properties": {
                      "amount": {
                        "description": "fund amount of the splits",
                        "type": "string",
                        "x-ms-summary": "Fund amount"
                      },
                      "fund_external_database_id": {
                        "description": "external fund id of the splits",
                        "type": "string",
                        "x-ms-summary": "External fund ID"
                      },
                      "fund_id": {
                        "description": "fund id of the splits",
                        "type": "integer",
                        "x-ms-summary": "Fund ID"
                      },
                      "fund_name": {
                        "description": "fund name of the splits",
                        "type": "string",
                        "x-ms-summary": "External fund name"
                      }
                    },
                    "type": "object",
                    "x-ms-summary": "Items"
                  },
                  "type": "array",
                  "x-ms-summary": "splits"
                },
                "status": {
                  "description": "Gift status",
                  "type": "string",
                  "x-ms-summary": "Status"
                }
              },
              "type": "object",
              "x-ms-summary": "Gift"
            },
            "guests": {
              "description": "Guests",
              "items": {
                "description": "Guest details",
                "properties": {
                  "external_database_id": {
                    "description": "RENXT Participant/guest id",
                    "type": "string",
                    "x-ms-summary": "RENXT Participant/guest ID"
                  },
                  "full_name": {
                    "description": "Full Name",
                    "type": "string",
                    "x-ms-summary": "Full Name"
                  },
                  "host_external_database_id": {
                    "description": "RENXT host ID - main registrant(for accompanying guests)",
                    "type": "string",
                    "x-ms-summary": "RENXT host ID"
                  },
                  "host_id": {
                    "description": "Almabase ID of the host of the guests",
                    "type": "number",
                    "x-ms-summary": "Almabase host ID for attendees"
                  },
                  "id": {
                    "description": "AB id of the guest object",
                    "type": "number",
                    "x-ms-summary": "Almabase ID of the guest object"
                  },
                  "is_host": {
                    "description": "if the guest is a host",
                    "type": "boolean",
                    "x-ms-summary": "if the guest is a host"
                  },
                  "matched_profile_external_database_id": {
                    "description": "RENXT constituent ID",
                    "type": "string",
                    "x-ms-summary": "RENXT constituent ID"
                  },
                  "matched_profile_id": {
                    "description": "AB constituent ID",
                    "type": "integer",
                    "x-ms-summary": "almabase record of constituent"
                  }
                },
                "type": "object",
                "x-ms-summary": "Guest details"
              },
              "type": "array",
              "x-ms-summary": "Guests"
            },
            "id": {
              "description": "System generated ID to uniquely identify a registration on almabase.",
              "type": "integer",
              "x-ms-summary": "ID"
            },
            "last_name": {
              "description": "Primary Guest last name",
              "type": "string",
              "x-ms-summary": "Primary Guest last name"
            },
            "registration_status": {
              "description": "Registration Status of the participant",
              "type": "string",
              "x-ms-summary": "Status"
            },
            "rsvp_status": {
              "description": "RSVP Status of the registration",
              "type": "string",
              "x-ms-summary": "RSVP Status"
            },
            "tickets": {
              "description": "Data association to registration status",
              "items": {
                "properties": {
                  "external_database_id": {
                    "description": "RENXT Participant fee id",
                    "type": "string",
                    "x-ms-summary": "RENXT Participant fee id"
                  },
                  "id": {
                    "description": "The ID of the purchase of a ticket (participant fee id)",
                    "type": "integer",
                    "x-ms-summary": "Almabase participant fee ID"
                  },
                  "quantity": {
                    "type": "integer",
                    "x-ms-summary": "quantity of the tickets bought"
                  },
                  "ticket_external_database_id": {
                    "description": "RENXT fee ID",
                    "type": "string",
                    "x-ms-summary": "The RENXT fee ID"
                  },
                  "ticket_id": {
                    "description": "AB ticket id",
                    "type": "integer",
                    "x-ms-summary": "Almabase ID"
                  },
                  "ticket_price": {
                    "description": "Price on almabase",
                    "type": "number",
                    "x-ms-summary": "The price of the ticket on almabase"
                  }
                },
                "type": "object"
              },
              "type": "array",
              "x-ms-summary": "Registration Ticket"
            },
            "total_amount": {
              "description": "Total amount paid",
              "type": "string",
              "x-ms-summary": "Final amount"
            }
          },
          "type": "object",
          "x-ms-summary": "Registration"
        },
        "source": {
          "description": "Source of the request made",
          "type": "string",
          "x-ms-summary": "Source of the request made",
          "x-ms-visibility": "important"
        },
        "time": {
          "description": "The action triggered time.",
          "type": "string",
          "x-ms-summary": "Event Triggered At"
        },
        "type": {
          "description": "Event Type.",
          "enum": [
            "com.almabase.eventsx.eventxregistration.registered",
            "com.almabase.eventsx.eventxregistration.updated",
            "com.almabase.eventsx.eventxregistration.*"
          ],
          "type": "string",
          "x-ms-summary": "Event Type"
        }
      },
      "type": "object"
    },
    "v1.EventApi.TicketCreatedOrUpdatedWebhookRequest": {
      "properties": {
        "callback_url": {
          "description": "Callback URL",
          "type": "string",
          "x-ms-notification-url": true,
          "x-ms-summary": "Callback URL",
          "x-ms-visibility": "internal"
        },
        "events": {
          "default": "com.almabase.eventsx.eventxticket.*",
          "description": "The list of events to trigger the flow.",
          "type": "string",
          "x-ms-dynamic-list": {
            "itemTitlePath": "name",
            "itemValuePath": "value",
            "operationId": "GetTicketMetadataWebhookEvents"
          },
          "x-ms-dynamic-values": {
            "operationId": "GetTicketMetadataWebhookEvents",
            "value-path": "value",
            "value-title": "name"
          },
          "x-ms-summary": "List of events"
        },
        "object_id": {
          "description": "System generated ID to uniquely identify an event.",
          "format": "int32",
          "type": "integer",
          "x-ms-dynamic-values": {
            "operationId": "ListEvents",
            "parameters": {
              "fields": [
                "id",
                "name"
              ]
            },
            "value-path": "id",
            "value-title": "name"
          },
          "x-ms-summary": "Event",
          "x-ms-visibility": "important"
        }
      },
      "required": [
        "object_id",
        "events",
        "callback_url"
      ],
      "type": "object"
    },
    "v1.EventApi.TicketWebhookResponse": {
      "properties": {
        "data": {
          "description": "The Ticket data.",
          "properties": {
            "end_datetime": {
              "description": "End time",
              "type": "string",
              "x-ms-summary": "End Time"
            },
            "event_external_database_id": {
              "description": "RENXT External ID",
              "type": "string",
              "x-ms-summary": "RENXT External ID"
            },
            "event_id": {
              "description": "Almabase Event ID",
              "type": "integer",
              "x-ms-summary": "Event Id"
            },
            "external_database_id": {
              "description": "External Ticket ID to uniquely identify a ticket on RENXT.",
              "type": "string",
              "x-ms-summary": "External ID"
            },
            "id": {
              "description": "System generated ID to uniquely identify a ticket.",
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "ID"
            },
            "name": {
              "description": "ticket/fee Name",
              "type": "string",
              "x-ms-summary": "name"
            },
            "price": {
              "description": "price of the ticket",
              "type": "string",
              "x-ms-summary": "price"
            },
            "start_datetime": {
              "description": "Start time",
              "type": "string",
              "x-ms-summary": "Start Time"
            },
            "total_tickets_available": {
              "description": "total ticket available",
              "type": "integer",
              "x-ms-summary": "Ticket/fee available"
            }
          },
          "type": "object",
          "x-ms-summary": "Ticket/fee"
        },
        "source": {
          "description": "Source of the request made",
          "type": "string",
          "x-ms-summary": "Source of the request made",
          "x-ms-visibility": "important"
        },
        "time": {
          "description": "The event time.",
          "type": "string",
          "x-ms-summary": "Event Triggered At"
        },
        "type": {
          "description": "Event Type.",
          "enum": [
            "com.almabase.eventsx.eventxticket.created",
            "com.almabase.eventsx.eventxticket.updated",
            "com.almabase.eventsx.eventxticket.*"
          ],
          "type": "string",
          "x-ms-summary": "Event Type"
        }
      },
      "type": "object"
    },
    "v1.EventsApi.GuestRead": {
      "properties": {
        "affiliation": {
          "properties": {
            "id": {
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "ID"
            },
            "name": {
              "type": "string",
              "x-ms-summary": "Name"
            }
          },
          "type": "object",
          "x-ms-summary": "affiliations"
        },
        "checked_in": {
          "type": "boolean",
          "x-ms-summary": "Checked In"
        },
        "checked_in_at": {
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Checked In At"
        },
        "checked_in_by": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Checked in by"
        },
        "email": {
          "maxLength": 124,
          "type": "string",
          "x-ms-summary": "Email"
        },
        "external_database_id": {
          "description": "External guest ID to uniquely identify a guest on RENXT events.",
          "type": "string",
          "x-ms-summary": "External RENXT ID",
          "x-ms-visibility": "important"
        },
        "first_name": {
          "maxLength": 124,
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "full_name": {
          "type": "string",
          "x-ms-summary": "Full Name"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID of the guests"
        },
        "is_email_added_to_profile": {
          "type": "boolean",
          "x-ms-summary": "email synced with profile?"
        },
        "is_email_new": {
          "type": "boolean",
          "x-ms-summary": "New Email?"
        },
        "is_parent_registration": {
          "type": "boolean",
          "x-ms-description": "is host?",
          "x-ms-summary": "is_host?"
        },
        "last_name": {
          "maxLength": 124,
          "type": "string",
          "x-ms-summary": "Last name"
        },
        "matched_profile": {
          "$ref": "#/definitions/v1.EventsApi.MatchedProfileRead"
        },
        "registration_id": {
          "type": "integer",
          "x-ms-summary": "Registration ID"
        },
        "tickets": {
          "items": {
            "$ref": "#/definitions/v1.EventsApi.TicketBoughtRead"
          },
          "type": "array"
        }
      },
      "title": "Guest",
      "type": "object"
    },
    "v1.EventApi.ContactPersonEditOrAdd": {
      "description": "Contact person of an event",
      "properties": {
        "email": {
          "description": "Email of the contact person",
          "format": "email",
          "type": "string",
          "x-ms-summary": "Email"
        },
        "name": {
          "description": "Name of the contact person",
          "type": "string",
          "x-ms-summary": "Name"
        },
        "phone_number": {
          "description": "Phone number of the contact person",
          "type": "string",
          "x-ms-summary": "Phone Number"
        }
      },
      "type": "object"
    },
    "v1.EventApi.ContactPersonRead": {
      "description": "Contact person of an event",
      "properties": {
        "email": {
          "description": "Email of the contact person",
          "format": "email",
          "type": "string",
          "x-ms-summary": "Email"
        },
        "id": {
          "description": "System generated ID to uniquely identify a contact person.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "name": {
          "description": "Name of the contact person",
          "type": "string",
          "x-ms-summary": "Name"
        },
        "phone_number": {
          "description": "Phone number of the contact person",
          "type": "string",
          "x-ms-summary": "Phone Number"
        }
      },
      "type": "object"
    },
    "v1.EventApi.EventAdd": {
      "description": "Event",
      "properties": {
        "description": {
          "description": "Description of the event",
          "type": "string",
          "x-ms-summary": "Description",
          "x-ms-visibility": "advanced"
        },
        "end_datetime": {
          "description": "End time of the event",
          "type": "string",
          "x-ms-summary": "End Time"
        },
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID",
          "x-ms-visibility": "advanced"
        },
        "external_registration_url": {
          "description": "The registration url of the event on an external website",
          "type": "string",
          "x-ms-summary": "External Registration Url",
          "x-ms-visibility": "advanced"
        },
        "name": {
          "description": "Name of the event",
          "type": "string",
          "x-ms-summary": "Name"
        },
        "start_datetime": {
          "description": "Start time of the event",
          "type": "string",
          "x-ms-summary": "Start Time"
        },
        "timezone": {
          "default": "US/Central",
          "description": "Timezone of the event",
          "type": "string",
          "x-ms-summary": "Timezone",
          "x-ms-visibility": "advanced"
        },
        "venue": {
          "description": "Location of the Venue",
          "properties": {
            "display_name": {
              "description": "City,State,Country of the Venue",
              "type": "string",
              "x-ms-summary": "Name",
              "x-ms-visibility": "advanced"
            }
          },
          "type": "object",
          "x-ms-summary": "Location"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1.EventApi.EventEdit": {
      "description": "Event",
      "properties": {
        "description": {
          "description": "Description of the event",
          "type": "string",
          "x-ms-summary": "Description",
          "x-ms-visibility": "advanced"
        },
        "end_datetime": {
          "description": "End time of the event",
          "type": "string",
          "x-ms-summary": "End Time"
        },
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID",
          "x-ms-visibility": "advanced"
        },
        "external_registration_url": {
          "description": "The registration url of the event on an external website",
          "type": "string",
          "x-ms-summary": "External Registration Url",
          "x-ms-visibility": "advanced"
        },
        "last_sync_time": {
          "description": "Time when the event was last synced",
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Last sync Time"
        },
        "name": {
          "description": "Name of the event",
          "type": "string",
          "x-ms-summary": "Name"
        },
        "start_datetime": {
          "description": "Start time of the event",
          "type": "string",
          "x-ms-summary": "Start Time"
        },
        "sync_error": {
          "description": "Error received pushing",
          "type": "string",
          "x-ms-summary": "Sync Error"
        },
        "timezone": {
          "default": "US/Central",
          "description": "Timezone of the event",
          "type": "string",
          "x-ms-summary": "Timezone",
          "x-ms-visibility": "advanced"
        },
        "venue": {
          "description": "Location of the Venue",
          "properties": {
            "display_name": {
              "description": "City,State,Country of the Venue",
              "type": "string",
              "x-ms-summary": "Name",
              "x-ms-visibility": "advanced"
            }
          },
          "type": "object",
          "x-ms-summary": "Location"
        }
      },
      "type": "object"
    },
    "v1.EventApi.EventRead": {
      "description": "Event",
      "properties": {
        "description": {
          "description": "Description of the event",
          "type": "string",
          "x-ms-summary": "Description",
          "x-ms-visibility": "advanced"
        },
        "end_datetime": {
          "description": "End time of the event",
          "type": "string",
          "x-ms-summary": "End Time"
        },
        "external_database_id": {
          "description": "A system assigned unique ID for the record by the external database. e.g. System Record ID for Raiser Edge NXT, Contact Id for Salesforce\n",
          "type": "string",
          "x-ms-summary": "External Database ID",
          "x-ms-visibility": "advanced"
        },
        "external_registration_url": {
          "description": "The registration url of the event on an external website",
          "type": "string",
          "x-ms-summary": "External Registration Url",
          "x-ms-visibility": "advanced"
        },
        "id": {
          "description": "System generated ID to uniquely identify an event.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "last_sync_time": {
          "description": "Time when the event was last synced",
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Last sync Time"
        },
        "name": {
          "description": "Name of the event",
          "type": "string",
          "x-ms-summary": "Name"
        },
        "start_datetime": {
          "description": "Start time of the event",
          "type": "string",
          "x-ms-summary": "Start Time"
        },
        "timezone": {
          "default": "US/Central",
          "description": "Timezone of the event",
          "type": "string",
          "x-ms-summary": "Timezone",
          "x-ms-visibility": "advanced"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "v1.EventsApi.EventTicketRead": {
      "properties": {
        "event_id": {
          "description": "Almabase Event ID",
          "type": "integer",
          "x-ms-summary": "Event Id"
        },
        "external_database_id": {
          "description": "External Ticket ID to uniquely identify a ticket on RENXT.",
          "type": "string",
          "x-ms-summary": "External ID"
        },
        "id": {
          "description": "System generated ID to uniquely identify a ticket.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_active": {
          "description": "is ticket active",
          "type": "boolean",
          "x-ms-description": "is ticket active",
          "x-ms-summary": "is active"
        },
        "name": {
          "description": "ticket/fee Name",
          "type": "string",
          "x-ms-summary": "name"
        },
        "number_of_guest_allowed": {
          "description": "number of guest allowed on a seated ticket",
          "format": "int32",
          "type": "integer",
          "x-ms-description": "number of guest allowed on a seated ticket",
          "x-ms-summary": "number of guest allowed"
        },
        "price": {
          "description": "price of the ticket",
          "type": "string",
          "x-ms-description": "price of the ticket",
          "x-ms-summary": "price"
        },
        "start_datetime": {
          "description": "Start time",
          "type": "string",
          "x-ms-summary": "Start Time"
        },
        "ticket_type": {
          "description": "Type",
          "type": "string",
          "x-ms-description": "Type of the ticket",
          "x-ms-summary": "Ticket Type"
        },
        "total_tickets_available": {
          "description": "total ticket available",
          "type": "integer",
          "x-ms-summary": "ticket/fee available"
        }
      },
      "title": "Event Ticket",
      "type": "object"
    },
    "v1.EventsApi.EventXFundRead": {
      "properties": {
        "default_selected_amount": {
          "type": "string",
          "x-ms-summary": "default selected amount"
        },
        "description": {
          "type": "string",
          "x-ms-summary": "Description"
        },
        "funds": {
          "$ref": "#/definitions/v1.EventsApi.GivingXFundRead"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_active": {
          "type": "boolean",
          "x-ms-summary": "is active?"
        },
        "minimum_donation_amount": {
          "type": "string",
          "x-ms-summary": "Minimum Donation Amount"
        },
        "name": {
          "type": "string",
          "x-ms-summary": "Name"
        },
        "quick_select_options": {
          "type": "string",
          "x-ms-summary": "quick sekect options"
        }
      },
      "title": "Event Fund",
      "type": "object"
    },
    "v1.EventsApi.FieldEntryRead": {
      "properties": {
        "custom_data": {
          "type": "object",
          "x-ms-summary": "Custom Data"
        },
        "display_value": {
          "type": "string",
          "x-ms-summary": "Display Value"
        },
        "field_id": {
          "type": "string",
          "x-ms-summary": "Field ID"
        },
        "google_place": {
          "$ref": "#/definitions/v1.EventsApi.GooglePlaceRead"
        },
        "label": {
          "type": "string",
          "x-ms-summary": "Label"
        },
        "slug": {
          "type": "string",
          "x-ms-summary": "Slug"
        },
        "value": {
          "type": "string",
          "x-ms-summary": "Value"
        }
      },
      "title": "Field Entry",
      "type": "object"
    },
    "v1.EventsApi.FormEntryRead": {
      "properties": {
        "entry_time": {
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Entry Time"
        },
        "field_entries": {
          "items": {
            "$ref": "#/definitions/v1.EventsApi.FieldEntryRead"
          },
          "type": "array"
        },
        "form_id": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Form ID"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "user": {
          "properties": {
            "email": {
              "maxLength": 254,
              "type": "string",
              "x-ms-summary": "email"
            },
            "id": {
              "type": "string",
              "x-ms-summary": "id"
            }
          },
          "type": "object",
          "x-ms-summary": "User"
        }
      },
      "title": "Form",
      "type": "object"
    },
    "v1.EventsApi.GiftRead": {
      "properties": {
        "amount": {
          "type": "string",
          "x-ms-summary": "Amount"
        },
        "completed_at": {
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Completed at"
        },
        "funds": {
          "type": "string",
          "x-ms-summary": "funds"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "splits": {
          "items": {
            "$ref": "#/definitions/v1.EventsApi.GiftSplitRead"
          },
          "type": "array"
        }
      },
      "title": "Gift",
      "type": "object"
    },
    "v1.EventsApi.GiftSplitRead": {
      "properties": {
        "amount": {
          "type": "string",
          "x-ms-summary": "Amount"
        },
        "fund": {
          "$ref": "#/definitions/v1.EventsApi.GivingXFundRead"
        },
        "id": {
          "type": "string",
          "x-ms-summary": "Id"
        },
        "name": {
          "type": "string",
          "x-ms-summary": "Name"
        }
      },
      "title": "Gift Split",
      "type": "object"
    },
    "v1.EventsApi.GivingXFundRead": {
      "properties": {
        "external_database_id": {
          "description": "A unique identifier assigned by the institution based on a custom convention.",
          "maxLength": 64,
          "type": "string",
          "x-ms-summary": "External database lookup ID"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "name": {
          "type": "string",
          "x-ms-summary": "Name"
        }
      },
      "title": "Giving Fund",
      "type": "object"
    },
    "v1.EventsApi.GooglePlaceRead": {
      "properties": {
        "coordinates": {
          "type": "string",
          "x-ms-summary": "coordinates"
        },
        "gpid": {
          "type": "string",
          "x-ms-summary": "Id"
        },
        "name": {
          "type": "string",
          "x-ms-summary": "Name"
        },
        "type": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "Type"
        }
      },
      "title": "Google Place Read",
      "type": "object"
    },
    "v1.EventsApi.GuestEdit": {
      "properties": {
        "external_database_id": {
          "description": "External guest ID to uniquely identify a guest on RENXT events.",
          "type": "string",
          "x-ms-summary": "External RENXT ID",
          "x-ms-visibility": "important"
        },
        "sync_error": {
          "description": "Error received pushing",
          "type": "string",
          "x-ms-summary": "Sync Error"
        }
      },
      "title": "Guest Update",
      "type": "object"
    },
    "v1.EventsApi.MatchedProfileRead": {
      "properties": {
        "affiliation": {
          "properties": {
            "id": {
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "ID"
            },
            "name": {
              "type": "string",
              "x-ms-summary": "Name"
            }
          },
          "type": "object",
          "x-ms-summary": "affiliation"
        },
        "email": {
          "type": "string",
          "x-ms-summary": "Email"
        },
        "external_database_id": {
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "first_name": {
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "formatted_name": {
          "type": "string",
          "x-ms-summary": "Formatted Name"
        },
        "full_name": {
          "type": "string",
          "x-ms-summary": "Full Name"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "last_name": {
          "type": "string",
          "x-ms-summary": "Last Name"
        },
        "present_picture": {
          "type": "string",
          "x-ms-summary": "Present Picture"
        },
        "profile_url": {
          "type": "string",
          "x-ms-summary": "Profile URL"
        }
      },
      "title": "Matched Profile",
      "type": "object"
    },
    "v1.EventsApi.RegistrationEdit": {
      "properties": {
        "amount_after_discount": {
          "type": "string",
          "x-ms-summary": "Amount after Discount"
        },
        "discount_amount": {
          "type": "string",
          "x-ms-summary": "Discount Amount"
        },
        "discount_code": {
          "properties": {
            "code": {
              "type": "string",
              "x-ms-summary": "Code"
            },
            "value": {
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "Value"
            }
          },
          "type": "object",
          "x-ms-summary": "Discount Code"
        },
        "edit_key": {
          "type": "string",
          "x-ms-description": "The signed data which holds registration_id and profile_id associated with registration",
          "x-ms-summary": "Edit Key"
        },
        "email": {
          "maxLength": 254,
          "type": "string",
          "x-ms-summary": "Email"
        },
        "event": {
          "properties": {
            "id": {
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "Event ID"
            },
            "name": {
              "type": "string",
              "x-ms-summary": "Event Name"
            },
            "url": {
              "format": "uri",
              "type": "string",
              "x-ms-summary": "Event URL"
            }
          },
          "type": "object",
          "x-ms-summary": "event"
        },
        "external_database_id": {
          "description": "External database ID to uniquely identify a registration on RENXT events.",
          "type": "string",
          "x-ms-summary": "External RENXT ID",
          "x-ms-visibility": "important"
        },
        "first_name": {
          "maxLength": 124,
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "full_name": {
          "type": "string",
          "x-ms-summary": "Full Name"
        },
        "gift": {
          "$ref": "#/definitions/v1.EventsApi.GiftRead"
        },
        "guests": {
          "items": {
            "$ref": "#/definitions/v1.EventsApi.GuestRead"
          },
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_donated_to_fund": {
          "type": "boolean",
          "x-ms-summary": "Is donated to fund?"
        },
        "is_registration_approved": {
          "type": "boolean",
          "x-ms-summary": "Is registration Approved"
        },
        "last_name": {
          "maxLength": 124,
          "type": "string",
          "x-ms-summary": "Last Name"
        },
        "matched_profile": {
          "$ref": "#/definitions/v1.EventsApi.MatchedProfileRead"
        },
        "mode": {
          "type": "string",
          "x-ms-enum": [
            "online",
            "offline"
          ],
          "x-ms-summary": "Mode"
        },
        "paid_amount": {
          "type": "string",
          "x-ms-summary": "Paid amount"
        },
        "payable_amount": {
          "type": "string",
          "x-ms-summary": "Payable amount"
        },
        "payment_config": {
          "$ref": "#/definitions/v1.EventsApi.TransactionConfigRead"
        },
        "payment_external_database_id": {
          "type": "string",
          "x-ms-summary": "Payment External Database ID"
        },
        "phone_number": {
          "maxLength": 64,
          "type": "string",
          "x-ms-summary": "Phone Number"
        },
        "refund_amount": {
          "type": "string",
          "x-ms-summary": "Refund Amount"
        },
        "registration_status": {
          "type": "string",
          "x-ms-enum": [
            "pending_payment",
            "registration_successful",
            "registration_cancelled"
          ],
          "x-ms-summary": "Registration Status"
        },
        "registration_status_display": {
          "type": "string",
          "x-ms-summary": "Registration Status Display"
        },
        "rsvp_status": {
          "type": "string",
          "x-ms-enum": [
            "yes",
            "no",
            "maybe"
          ],
          "x-ms-summary": "RSVP status"
        },
        "rsvp_status_display": {
          "type": "string",
          "x-ms-summary": "RSVP status display"
        },
        "sync_error": {
          "description": "Error received pushing",
          "type": "string",
          "x-ms-summary": "Sync Error"
        },
        "tickets": {
          "items": {
            "$ref": "#/definitions/v1.EventsApi.TicketBoughtRead"
          },
          "type": "array"
        },
        "total_amount": {
          "type": "string",
          "x-ms-summary": "Total Amount"
        },
        "transactions": {
          "items": {
            "$ref": "#/definitions/v1.EventsApi.TransactionRead"
          },
          "type": "array"
        },
        "utm_campaign": {
          "type": "string",
          "x-ms-summary": "UTM campaign"
        },
        "utm_medium": {
          "type": "string",
          "x-ms-summary": "UTM Medium"
        },
        "utm_source": {
          "type": "string",
          "x-ms-summary": "UTM Source"
        },
        "venue_location": {
          "type": "string",
          "x-ms-summary": "Venue Location"
        },
        "zoom_registration": {
          "properties": {
            "registrant_id": {
              "type": "string",
              "x-ms-summary": "Zoom Registrant ID"
            },
            "response": {
              "type": "object",
              "x-ms-summary": "Response from zoom"
            }
          },
          "type": "object",
          "x-ms-summary": "Zoom Registration"
        }
      },
      "title": "Registration Edit",
      "type": "object"
    },
    "v1.EventsApi.RegistrationRead": {
      "properties": {
        "amount_after_discount": {
          "type": "string",
          "x-ms-summary": "Amount after Discount"
        },
        "discount_amount": {
          "type": "string",
          "x-ms-summary": "Discount Amount"
        },
        "discount_code": {
          "properties": {
            "code": {
              "type": "string",
              "x-ms-summary": "Code"
            },
            "value": {
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "Value"
            }
          },
          "type": "object",
          "x-ms-summary": "Discount Code"
        },
        "edit_key": {
          "type": "string",
          "x-ms-description": "The signed data which holds registration_id and profile_id associated with registration",
          "x-ms-summary": "Edit Key"
        },
        "email": {
          "maxLength": 254,
          "type": "string",
          "x-ms-summary": "Email"
        },
        "event": {
          "properties": {
            "id": {
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "Event ID"
            },
            "name": {
              "type": "string",
              "x-ms-summary": "Event Name"
            },
            "url": {
              "format": "uri",
              "type": "string",
              "x-ms-summary": "Event URL"
            }
          },
          "type": "object",
          "x-ms-summary": "event"
        },
        "external_database_id": {
          "description": "External database ID to uniquely identify a registration on RENXT events.",
          "type": "string",
          "x-ms-summary": "External RENXT ID",
          "x-ms-visibility": "important"
        },
        "first_name": {
          "maxLength": 124,
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "full_name": {
          "type": "string",
          "x-ms-summary": "Full Name"
        },
        "gift": {
          "$ref": "#/definitions/v1.EventsApi.GiftRead"
        },
        "guests": {
          "items": {
            "$ref": "#/definitions/v1.EventsApi.GuestRead"
          },
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "is_donated_to_fund": {
          "type": "boolean",
          "x-ms-summary": "Is donated to fund?"
        },
        "is_registration_approved": {
          "type": "boolean",
          "x-ms-summary": "Is registration Approved"
        },
        "last_name": {
          "maxLength": 124,
          "type": "string",
          "x-ms-summary": "Last Name"
        },
        "matched_profile": {
          "$ref": "#/definitions/v1.EventsApi.MatchedProfileRead"
        },
        "mode": {
          "type": "string",
          "x-ms-enum": [
            "online",
            "offline"
          ],
          "x-ms-summary": "Mode"
        },
        "paid_amount": {
          "type": "string",
          "x-ms-summary": "Paid amount"
        },
        "payable_amount": {
          "type": "string",
          "x-ms-summary": "Payable amount"
        },
        "payment_config": {
          "$ref": "#/definitions/v1.EventsApi.TransactionConfigRead"
        },
        "payment_external_database_id": {
          "type": "string",
          "x-ms-summary": "Payment External Database ID"
        },
        "phone_number": {
          "maxLength": 64,
          "type": "string",
          "x-ms-summary": "Phone Number"
        },
        "refund_amount": {
          "type": "string",
          "x-ms-summary": "Refund Amount"
        },
        "registration_status": {
          "type": "string",
          "x-ms-enum": [
            "pending_payment",
            "registration_successful",
            "registration_cancelled"
          ],
          "x-ms-summary": "Registration Status"
        },
        "registration_status_display": {
          "type": "string",
          "x-ms-summary": "Registration Status Display"
        },
        "rsvp_status": {
          "type": "string",
          "x-ms-enum": [
            "yes",
            "no",
            "maybe"
          ],
          "x-ms-summary": "RSVP status"
        },
        "rsvp_status_display": {
          "type": "string",
          "x-ms-summary": "RSVP status display"
        },
        "tickets": {
          "items": {
            "$ref": "#/definitions/v1.EventsApi.TicketBoughtRead"
          },
          "type": "array"
        },
        "total_amount": {
          "type": "string",
          "x-ms-summary": "Total Amount"
        },
        "transactions": {
          "items": {
            "$ref": "#/definitions/v1.EventsApi.TransactionRead"
          },
          "type": "array"
        },
        "utm_campaign": {
          "type": "string",
          "x-ms-summary": "UTM campaign"
        },
        "utm_medium": {
          "type": "string",
          "x-ms-summary": "UTM Medium"
        },
        "utm_source": {
          "type": "string",
          "x-ms-summary": "UTM Source"
        },
        "venue_location": {
          "type": "string",
          "x-ms-summary": "Venue Location"
        },
        "zoom_registration": {
          "properties": {
            "registrant_id": {
              "type": "string",
              "x-ms-summary": "Zoom Registrant ID"
            },
            "response": {
              "type": "object",
              "x-ms-summary": "Response from zoom"
            }
          },
          "type": "object",
          "x-ms-summary": "Zoom Registration"
        }
      },
      "type": "object"
    },
    "v1.EventsApi.TicketBoughtRead": {
      "properties": {
        "external_database_id": {
          "type": "string",
          "x-ms-summary": "external database ID of the purchased ticket"
        },
        "quantity": {
          "format": "int32",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer",
          "x-ms-summary": "Quantity"
        },
        "ticket": {
          "properties": {
            "external_database_id": {
              "type": "string",
              "x-ms-summary": "external database ID of the ticket"
            },
            "id": {
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "ID"
            },
            "name": {
              "type": "string",
              "x-ms-summary": "Name"
            },
            "price": {
              "type": "string",
              "x-ms-summary": "Price"
            }
          },
          "type": "object",
          "x-ms-summary": "Ticket"
        }
      },
      "title": "Ticket",
      "type": "object"
    },
    "v1.EventsApi.TicketEdit": {
      "properties": {
        "external_database_id": {
          "description": "External Ticket ID to uniquely identify a ticket on RENXT.",
          "type": "string",
          "x-ms-summary": "RENXT ID",
          "x-ms-visibility": "important"
        },
        "name": {
          "description": "ticket/fee Name",
          "type": "string",
          "x-ms-summary": "name",
          "x-ms-visibility": "important"
        },
        "sync_error": {
          "description": "Error received pushing",
          "type": "string",
          "x-ms-summary": "Sync Error"
        },
        "total_tickets_available": {
          "description": "total ticket available",
          "type": "integer",
          "x-ms-summary": "ticket/fee available",
          "x-ms-visibility": "important"
        }
      },
      "title": "Ticket Edit",
      "type": "object"
    },
    "v1.EventsApi.TicketRead": {
      "properties": {
        "event_external_database_id": {
          "description": "RENXT External ID of the event",
          "type": "string",
          "x-ms-summary": "RENXT External ID of the event"
        },
        "event_id": {
          "description": "Almabase Event ID",
          "type": "integer",
          "x-ms-summary": "Event Id"
        },
        "external_database_id": {
          "description": "External Ticket ID to uniquely identify a ticket on RENXT.",
          "type": "string",
          "x-ms-summary": "External ID"
        },
        "id": {
          "description": "System generated ID to uniquely identify a ticket.",
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "name": {
          "description": "ticket/fee Name",
          "type": "string",
          "x-ms-summary": "name"
        },
        "price": {
          "description": "price of the ticket",
          "type": "string",
          "x-ms-summary": "price"
        },
        "start_datetime": {
          "description": "Start time",
          "type": "string",
          "x-ms-summary": "Start Time"
        },
        "total_tickets_available": {
          "description": "total ticket available",
          "type": "integer",
          "x-ms-summary": "ticket/fee available"
        }
      },
      "title": "Ticket Read",
      "type": "object"
    },
    "v1.EventsApi.TransactionConfigRead": {
      "properties": {
        "amount": {
          "type": "string",
          "x-ms-summary": "Amount"
        },
        "college_name": {
          "type": "string",
          "x-ms-summary": "College Name"
        },
        "currency": {
          "type": "integer",
          "x-ms-summary": "Currency",
          "x-ms-x-ms-enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11
          ]
        },
        "email": {
          "type": "string",
          "x-ms-summary": "Email"
        },
        "first_name": {
          "type": "string",
          "x-ms-summary": "First Name"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-ms-summary": "ID"
        },
        "last_name": {
          "type": "string",
          "x-ms-summary": "Last Name"
        },
        "primary_color": {
          "type": "string",
          "x-ms-summary": "Primary Colours"
        },
        "product_info": {
          "type": "string",
          "x-ms-summary": "Product Info"
        },
        "settings": {
          "type": "object",
          "x-ms-summary": "Settings"
        },
        "site_logo": {
          "type": "string",
          "x-ms-summary": "Site Logo"
        },
        "type": {
          "type": "string",
          "x-ms-enum": [
            "one_time"
          ],
          "x-ms-summary": "Type"
        }
      },
      "title": "Transaction",
      "type": "object"
    },
    "v1.EventsApi.TransactionRead": {
      "properties": {
        "account": {
          "properties": {
            "id": {
              "format": "int32",
              "type": "integer",
              "x-ms-summary": "ID"
            },
            "name": {
              "type": "string",
              "x-ms-summary": "Name"
            }
          },
          "type": "object",
          "x-ms-summary": "account"
        },
        "amount": {
          "type": "string",
          "x-ms-summary": "Amount"
        },
        "amount_refunded": {
          "type": "string",
          "x-ms-summary": "Amount refund"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Created AT"
        },
        "external_database_id": {
          "type": "string",
          "x-ms-summary": "External Database ID"
        },
        "failure_reason": {
          "type": "string",
          "x-ms-summary": "Failure Reason"
        },
        "id": {
          "format": "uuid",
          "type": "string",
          "x-ms-summary": "ID"
        },
        "mode": {
          "type": "string",
          "x-ms-enum": [
            "online",
            "offline"
          ],
          "x-ms-summary": "Mode"
        },
        "refund_status": {
          "type": "string",
          "x-ms-enum": [
            "full",
            "partial",
            "no_refund"
          ],
          "x-ms-summary": "Refund Status"
        },
        "refund_status_display": {
          "type": "string",
          "x-ms-summary": "Refund Status Display"
        },
        "status": {
          "format": "int32",
          "x-ms-enum": [
            1,
            2,
            3,
            4,
            5
          ],
          "x-ms-summary": "Status"
        },
        "status_display": {
          "type": "string",
          "x-ms-summary": "Status Display"
        },
        "status_updated_at": {
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Status Updated at"
        },
        "transaction_id": {
          "description": "Obtained from Payment Gateway",
          "type": "string",
          "x-ms-summary": "Transaction ID"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-ms-summary": "Updated AT"
        }
      },
      "title": "Transactions",
      "type": "object"
    }
  },
  "paths": {
    "/v1/custom_forms/entries/metadata/webhook_events/": {
      "get": {
        "description": "Get a list of all the supported events",
        "operationId": "GetFormEntryMetadataWebhookEvents",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of webhook events available for customform entry",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/custom_forms/{form_id}/entry_openapi_schema/": {
      "get": {
        "description": "Get the OpenAPI webhook response schema for the form entry webhook",
        "operationId": "GetFormEntryWebhookResponseSchema",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a form.",
            "format": "int32",
            "in": "path",
            "name": "form_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Form ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.FormApi.FormEntryWebhookResponse"
            }
          }
        },
        "summary": "Get a form entry webhook response schema",
        "tags": [
          "Schema"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/virtual/webhooks/customforms.customformentry/": {
      "post": {
        "description": "Triggers when a form is submitted or an existing form submission is updated.",
        "operationId": "FormEntryCreateOrUpdateWebhook",
        "parameters": [
          {
            "description": "Create a webhook to receive form entry data when a form is submitted on Almabase.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.FormApi.FormEntryCreatedOrUpdatedWebhookRequest"
            },
            "x-ms-summary": "Create Form Entry Webhook"
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "type": "object"
            }
          }
        },
        "summary": "When a form is submitted or an existing form submission is updated",
        "x-ms-trigger": "single",
        "x-ms-trigger-hint": "To see it work, submit the associated form or update an existing form submission on Almabase"
      },
      "x-ms-notification-content": {
        "description": "Dynamic schema for the form entry webhook.",
        "schema": {
          "x-ms-dynamic-properties": {
            "operationId": "GetFormEntryWebhookResponseSchema",
            "parameters": {
              "form_id": {
                "parameterReference": "body/object_id"
              }
            }
          },
          "x-ms-dynamic-schema": {
            "operationId": "GetFormEntryWebhookResponseSchema",
            "parameters": {
              "form_id": {
                "parameter": "object_id"
              }
            }
          }
        }
      }
    },
    "/v1/custom_forms/": {
      "get": {
        "description": "Get a list of forms.",
        "operationId": "ListForms",
        "parameters": [
          {
            "collectionFormat": "csv",
            "default": [
              "id",
              "title"
            ],
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.FormApi.FormRead"
              },
              "type": "array"
            }
          }
        },
        "summary": "List forms",
        "tags": [
          "Form"
        ]
      }
    },
    "/v1/custom_forms/{form_id}/entries/": {
      "post": {
        "description": "Creates a new form submission for a form",
        "operationId": "CreateFormEntry",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a form.",
            "format": "int32",
            "in": "path",
            "name": "form_id",
            "required": true,
            "type": "integer",
            "x-ms-dynamic-values": {
              "operationId": "ListForms",
              "parameters": {
                "fields": [
                  "id",
                  "title"
                ]
              },
              "value-path": "id",
              "value-title": "title"
            },
            "x-ms-summary": "Form",
            "x-ms-url-encoding": "single"
          },
          {
            "description": "Create a new form submission",
            "in": "body",
            "name": "body",
            "schema": {
              "x-ms-dynamic-properties": {
                "operationId": "GetFormEntryCreateSchema",
                "parameters": {
                  "form_id": {
                    "parameterReference": "form_id"
                  }
                }
              },
              "x-ms-dynamic-schema": {
                "operationId": "GetFormEntryCreateSchema",
                "parameters": {
                  "form_id": {
                    "parameter": "form_id"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "properties": {
                "id": {
                  "description": "System generated ID to uniquely identify a form submission.",
                  "format": "int32",
                  "type": "integer",
                  "x-ms-summary": "Response ID"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Submit a form",
        "tags": [
          "Form Entry"
        ]
      }
    },
    "/v1/custom_forms/{form_id}/entries/{entry_id}/": {
      "get": {
        "description": "Returns information about a form submission.",
        "operationId": "GetFormEntry",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a form.",
            "format": "int32",
            "in": "path",
            "name": "form_id",
            "required": true,
            "type": "integer",
            "x-ms-dynamic-values": {
              "operationId": "ListForms",
              "parameters": {
                "fields": [
                  "id",
                  "title"
                ]
              },
              "value-path": "id",
              "value-title": "title"
            },
            "x-ms-summary": "Form",
            "x-ms-url-encoding": "single"
          },
          {
            "description": "System generated ID to uniquely identify a form submission.",
            "in": "path",
            "name": "entry_id",
            "required": true,
            "type": "string",
            "x-ms-summary": "Response ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "x-ms-dynamic-properties": {
                "itemValuePath": "properties/data",
                "operationId": "GetFormEntryWebhookResponseSchema",
                "parameters": {
                  "form_id": {
                    "parameterReference": "form_id"
                  }
                }
              },
              "x-ms-dynamic-schema": {
                "operationId": "GetFormEntryWebhookResponseSchema",
                "parameters": {
                  "form_id": {
                    "parameter": "form_id"
                  }
                },
                "value-path": "properties/data"
              }
            }
          }
        },
        "summary": "Get a submission of a form",
        "tags": [
          "Form Entry"
        ]
      }
    },
    "/v1/custom_forms/{form_id}/entry_openapi_schema_create/": {
      "get": {
        "description": "Get the OpenAPI schema for creating form entry",
        "operationId": "GetFormEntryCreateSchema",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a form.",
            "format": "int32",
            "in": "path",
            "name": "form_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Form ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.FormApi.FormEntryAdd"
            }
          }
        },
        "summary": "Get a schema to create form entry",
        "tags": [
          "Schema"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/givingx/gifts/metadata/webhook_events/": {
      "get": {
        "description": "Get a list of all the supported events",
        "operationId": "GetGiftMetadataWebhookEvents",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of webhook events available for gifts",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/virtual/webhooks/giving.gift/": {
      "post": {
        "description": "Triggers when a new gift is successfully recorded on a Giving Page by a donor or the payment to a gift is failed.\n",
        "operationId": "GiftSucceededOrFailedWebhook",
        "parameters": [
          {
            "description": "Register a webhook to receive gift data when a gift is successful on Almabase",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GiftSucceededOrFailedWebhookRequest"
            },
            "x-ms-summary": "Register Gift Webhook on Almabase"
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "type": "object"
            }
          }
        },
        "summary": "When a new gift is successful or an online gift payment is failed",
        "x-ms-trigger": "single",
        "x-ms-trigger-hint": "To see it work, make a gift on Almabase"
      },
      "x-ms-notification-content": {
        "description": "Schema for the gift succeeded webhook.",
        "schema": {
          "$ref": "#/definitions/v1.GivingApi.GiftWebhookResponse"
        }
      }
    },
    "/v1/givingx/funds/": {
      "get": {
        "description": "Returns a list of funds",
        "operationId": "ListFunds",
        "parameters": [
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.GivingApi.FundRead"
              },
              "type": "array"
            }
          }
        },
        "summary": "List funds",
        "tags": [
          "Fund"
        ]
      },
      "post": {
        "description": "Creates a new fund.",
        "operationId": "CreateFund",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.FundAddOrEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.FundRead"
            }
          }
        },
        "summary": "Create a fund",
        "tags": [
          "Fund"
        ]
      }
    },
    "/v1/givingx/funds/{id}/": {
      "get": {
        "description": "Returns information about a fund.",
        "operationId": "GetFund",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a fund.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Fund ID",
            "x-ms-url-encoding": "single"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.FundRead"
            }
          }
        },
        "summary": "Get a fund",
        "tags": [
          "Fund"
        ]
      },
      "patch": {
        "description": "Updates a fund.",
        "operationId": "UpdateFund",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a fund.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Fund ID",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.FundAddOrEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.FundRead"
            }
          }
        },
        "summary": "Update a fund",
        "tags": [
          "Fund"
        ]
      }
    },
    "/v1/givingx/gifts/": {
      "get": {
        "description": "Returns a list of gifts.",
        "operationId": "ListGifts",
        "parameters": [
          {
            "default": "completed",
            "description": "Filter gifts based on the status.",
            "in": "query",
            "name": "status",
            "required": true,
            "type": "string",
            "x-ms-dynamic-list": {
              "itemTitlePath": "title",
              "itemValuePath": "value",
              "operationId": "GetGiftMetadataGiftStatus"
            },
            "x-ms-dynamic-values": {
              "operationId": "GetGiftMetadataGiftStatus",
              "value-path": "value",
              "value-title": "title"
            },
            "x-ms-summary": "Status",
            "x-ms-visibility": "important"
          },
          {
            "description": "System generated ID to uniquely identify a giving page.",
            "format": "int32",
            "in": "query",
            "name": "campaign",
            "required": false,
            "type": "integer",
            "x-ms-dynamic-values": {
              "operationId": "ListGivingPages",
              "parameters": {
                "fields": [
                  "id",
                  "name"
                ]
              },
              "value-path": "id",
              "value-title": "name"
            },
            "x-ms-summary": "Giving Page",
            "x-ms-visibility": "important"
          },
          {
            "description": "System generated ID to uniquely identify a gift group or a list.",
            "format": "uuid",
            "in": "query",
            "name": "group_id",
            "required": false,
            "type": "string",
            "x-ms-summary": "Filter By Gift Group Id",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Filter gifts based on they have a batch number or not.",
            "in": "query",
            "name": "batch_number__isnull",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Should have empty batch number?",
            "x-ms-visibility": "important"
          },
          {
            "description": "Filter gifts based on they have already have external database Id or not. NOTE: The Gifts that have external database id, are already pushed to external database.\n",
            "in": "query",
            "name": "external_database_id__isnull",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Should have empty external database id?",
            "x-ms-visibility": "important"
          },
          {
            "description": "Filter gifts based on external database id.",
            "in": "query",
            "name": "external_database_id__exact",
            "required": false,
            "type": "string",
            "x-ms-summary": "Filter by External Database Id",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Filter gifts based on donor email address",
            "in": "query",
            "name": "donor_email",
            "required": false,
            "type": "string",
            "x-ms-summary": "Filter by Donor Email",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Search for gifts by name or email address.",
            "in": "query",
            "name": "search",
            "required": false,
            "type": "string",
            "x-ms-summary": "Search By",
            "x-ms-visibility": "advanced"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          },
          {
            "default": 10,
            "description": "Represents the number of records to return. The default is 10. The maximum is 50.",
            "format": "int32",
            "in": "query",
            "maximum": 50,
            "minimum": 1,
            "name": "page_size",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Page Size",
            "x-ms-visibility": "advanced"
          },
          {
            "default": 1,
            "description": "Represent the page numbers (offset). For use with pagination.",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Page Number",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Define the order of the gifts in the response. A \"-\" prefix represent descending order, and absence of the prefix would return the results in ascending order.\n",
            "enum": [
              "id",
              "donor_name",
              "-id",
              "-donor_name"
            ],
            "in": "query",
            "name": "ordering",
            "required": false,
            "type": "string",
            "x-ms-summary": "Order by",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "properties": {
                "nextlink": {
                  "description": "URL for the next page set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Next results URL"
                },
                "previouslink": {
                  "description": "URL for the previous set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Previous results URL"
                },
                "total": {
                  "description": "Total gifts for the given filters",
                  "format": "int32",
                  "type": "integer",
                  "x-ms-summary": "Total Gifts"
                },
                "value": {
                  "description": "List of gifts returned for the given filters. The results are paginated.",
                  "items": {
                    "$ref": "#/definitions/v1.GivingApi.GiftRead"
                  },
                  "type": "array",
                  "x-ms-summary": "Gifts"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "List gifts",
        "tags": [
          "Gift"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextlink"
        }
      },
      "post": {
        "description": "Creates a new gift.",
        "operationId": "CreateGift",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GiftAdd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GiftRead"
            }
          }
        },
        "summary": "Create a gift",
        "tags": [
          "Gift"
        ]
      }
    },
    "/v1/givingx/gifts/metadata/gift_currencies/": {
      "get": {
        "description": "Get a list of curriences support for a gift",
        "operationId": "GetGiftMetadataGiftCurrencies",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "List gift currencies",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/givingx/gifts/metadata/gift_honor_prefix/": {
      "get": {
        "description": "Get a list of gift honor prefixes",
        "operationId": "GetGiftMetadataGiftHonorPrefix",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "List gift honor prefixes",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/givingx/gifts/metadata/gift_modes/": {
      "get": {
        "description": "Get a list of gift modes",
        "operationId": "GetGiftMetadataGiftModes",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "List gift modes",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/givingx/gifts/metadata/gift_status/": {
      "get": {
        "description": "Get a list of gift status",
        "operationId": "GetGiftMetadataGiftStatus",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "List gift status",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/givingx/gifts/workflows/results/": {
      "post": {
        "deprecated": false,
        "description": "Add the result of workflow execution of a group of gifts.",
        "operationId": "UpdateGiftWorkflowResults",
        "parameters": [
          {
            "description": "Body of the action.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "properties": {
                "count_error": {
                  "description": "Number of gifts that could not be synced because of an error.",
                  "type": "integer",
                  "x-ms-summary": "Error Count"
                },
                "count_success": {
                  "description": "Count of gifts that were synced successfully.",
                  "type": "integer",
                  "x-ms-summary": "Success Count"
                },
                "count_total": {
                  "description": "Total number of gifts processed.",
                  "type": "integer",
                  "x-ms-summary": "Total Count"
                },
                "errors": {
                  "description": "List of errors that were encountered.",
                  "items": {
                    "properties": {
                      "gift_id": {
                        "description": "System generated ID to uniquely identify a gift.",
                        "type": "integer",
                        "x-ms-summary": "Gift ID"
                      },
                      "reasons": {
                        "description": "A comma separated list of errors that were encountered.",
                        "type": "string",
                        "x-ms-summary": "Reasons"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "x-ms-summary": "Errors"
                },
                "gift_group_id": {
                  "description": "System generated ID to uniquely identify a gift group.",
                  "type": "string",
                  "x-ms-summary": "Gift Group ID"
                }
              },
              "type": "object"
            },
            "x-ms-summary": "Body"
          }
        ],
        "responses": {
          "200": {
            "description": "Success Response",
            "schema": {
              "properties": {
                "link": {
                  "description": "The link to view results and fix errors.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Results Page Link"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Add workflow result",
        "tags": [
          "GiftLists"
        ]
      }
    },
    "/v1/givingx/gifts/{id}/": {
      "get": {
        "description": "Returns information about a gift.",
        "operationId": "GetGift",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a gift.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Gift ID",
            "x-ms-url-encoding": "single"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GiftRead"
            }
          }
        },
        "summary": "Get a gift",
        "tags": [
          "Gift"
        ]
      },
      "patch": {
        "description": "Updates a gift",
        "operationId": "UpdateGift",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a gift.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Gift ID",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GiftEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GiftRead"
            }
          }
        },
        "summary": "Update a gift",
        "tags": [
          "Gift"
        ]
      }
    },
    "/v1/givingx/pages/": {
      "get": {
        "description": "Returns a list of giving pages.",
        "operationId": "ListGivingPages",
        "parameters": [
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.GivingApi.GivingPageRead"
              },
              "type": "array"
            }
          }
        },
        "summary": "List giving pages",
        "tags": [
          "Giving Page"
        ]
      }
    },
    "/v1/givingx/pages/{id}/": {
      "get": {
        "description": "Returns information about a giving page.",
        "operationId": "GetGivingPage",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a giving page.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Giving Page ID",
            "x-ms-url-encoding": "single"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.GivingApi.GivingPageRead"
            }
          }
        },
        "summary": "Get a giving page",
        "tags": [
          "Giving Page"
        ]
      }
    },
    "/v1/almasights/customobjects/": {
      "post": {
        "description": "Send a new custom touchpoint to Almabase.",
        "operationId": "createTouchpointCustomObject",
        "parameters": [
          {
            "description": "Filters the types by touchpoint programs.",
            "format": "int32",
            "in": "query",
            "name": "touchpoint_program",
            "required": true,
            "type": "integer",
            "x-ms-dynamic-values": {
              "operationId": "ListTouchpointPrograms",
              "parameters": {
                "fields": [
                  "id",
                  "name"
                ]
              },
              "value-path": "id",
              "value-title": "name"
            },
            "x-ms-summary": "Program",
            "x-ms-visibility": "important"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.AlmasightsApi.TouchpointCustomObjectAdd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.AlmasightsApi.TouchpointCustomObjectAdd"
            }
          }
        },
        "summary": "Create a touchpoint",
        "tags": [
          "Custom Touchpoint Object"
        ]
      }
    },
    "/v1/almasights/programs/": {
      "get": {
        "description": "Get a list of programs.",
        "operationId": "ListTouchpointPrograms",
        "parameters": [
          {
            "collectionFormat": "csv",
            "default": [
              "id",
              "name"
            ],
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          },
          {
            "default": true,
            "description": "Indicates a custom program.",
            "in": "query",
            "name": "is_custom",
            "required": true,
            "type": "boolean",
            "x-ms-summary": "Is custom program?",
            "x-ms-visibility": "internal"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.AlmasightsApi.TouchpointProgramRead"
              },
              "type": "array"
            }
          }
        },
        "summary": "List programs",
        "tags": [
          "Touchpoint Program"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/almasights/types/": {
      "get": {
        "description": "Get a list of touchpoint types.",
        "operationId": "ListTouchpointTypes",
        "parameters": [
          {
            "collectionFormat": "csv",
            "default": [
              "id",
              "title"
            ],
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Filters the types by touchpoint programs.",
            "format": "int32",
            "in": "query",
            "name": "touchpoint_program",
            "required": false,
            "type": "integer",
            "x-ms-dynamic-values": {
              "operationId": "ListTouchpointPrograms",
              "parameters": {
                "fields": [
                  "id",
                  "name"
                ]
              },
              "value-path": "id",
              "value-title": "name"
            },
            "x-ms-summary": "Program"
          },
          {
            "default": true,
            "description": "Indicates a custom touchpoint type.",
            "in": "query",
            "name": "is_custom",
            "required": true,
            "type": "boolean",
            "x-ms-summary": "Is custom?",
            "x-ms-visibility": "internal"
          },
          {
            "default": false,
            "description": "Indicates an internal touchpoint type.",
            "in": "query",
            "name": "is_internal",
            "required": true,
            "type": "boolean",
            "x-ms-summary": "Is internal?",
            "x-ms-visibility": "internal"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.AlmasightsApi.TouchpointTypeRead"
              },
              "type": "array"
            }
          }
        },
        "summary": "List touchpoint types",
        "tags": [
          "Touchpoint Type"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/profiles/email_addresses/metadata/webhook_events/": {
      "get": {
        "description": "Get a list of all the supported events",
        "operationId": "GetEmailMetadataWebhookEvents",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of webhook events available for record emails",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/profiles/metadata/webhook_events/": {
      "get": {
        "description": "Get a list of all the supported events",
        "operationId": "GetRecordMetadataWebhookEvents",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of webhook events available for records",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/virtual/webhooks/crm.record/": {
      "post": {
        "description": "Triggers when a new record is created on Almabase or an existing record is updated.\n",
        "operationId": "RecordChangedWebhook",
        "parameters": [
          {
            "description": "Register a webhook to receive record data when a record is changed on Almabase",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.RecordChangedWebhookRequest"
            },
            "x-ms-summary": "Register Record Change Webhook on Almabase"
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "type": "object"
            }
          }
        },
        "summary": "When an record is created or updated on Almabase",
        "x-ms-trigger": "single",
        "x-ms-trigger-hint": "To trigger this, create/update a record on Almabase"
      },
      "x-ms-notification-content": {
        "description": "Scheme for the email changed webhook",
        "schema": {
          "$ref": "#/definitions/v1.RecordApi.RecordWebhookResponse"
        }
      }
    },
    "/v1/virtual/webhooks/profile.email/": {
      "post": {
        "description": "Triggers when a new email is created on a record or an existing email is updated or deleted from a record.\n",
        "operationId": "EmailChangedWebhook",
        "parameters": [
          {
            "description": "Register a webhook to receive email data when an email is changed on Almabase",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.EmailChangedWebhookRequest"
            },
            "x-ms-summary": "Register Email Change Webhook on Almabase"
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "type": "object"
            }
          }
        },
        "summary": "When an email is created, updated or deleted on a record",
        "x-ms-trigger": "single",
        "x-ms-trigger-hint": "To trigger this, create/change an email of a record on Almabase"
      },
      "x-ms-notification-content": {
        "description": "Scheme for the email changed webhook",
        "schema": {
          "$ref": "#/definitions/v1.RecordApi.EmailWebhookResponse"
        }
      }
    },
    "/v1/profiles": {
      "get": {
        "description": "Returns a list of records.",
        "operationId": "ListRecords",
        "parameters": [
          {
            "description": "Search for records by name.",
            "in": "query",
            "name": "search",
            "required": false,
            "type": "string",
            "x-ms-summary": "Search By Name",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Search for records by email address.",
            "in": "query",
            "name": "email_addresses__address",
            "required": false,
            "type": "string",
            "x-ms-summary": "Search By Email Address",
            "x-ms-visibility": "important"
          },
          {
            "description": "Search for records by external database ID.",
            "in": "query",
            "name": "external_database_id",
            "required": false,
            "type": "string",
            "x-ms-summary": "Search By External Database Id",
            "x-ms-visibility": "advanced"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Updated on or after a date.",
            "format": "date-time",
            "in": "query",
            "name": "updated_at__gte",
            "required": false,
            "type": "string",
            "x-ms-summary": "Updated on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "Created on or after a date.",
            "format": "date-time",
            "in": "query",
            "name": "created_at__gte",
            "required": false,
            "type": "string",
            "x-ms-summary": "Created on or after",
            "x-ms-visibility": "advanced"
          },
          {
            "default": 50,
            "description": "Represents the number of records to return. The default is 10. The maximum is 50.",
            "format": "int32",
            "in": "query",
            "maximum": 50,
            "minimum": 1,
            "name": "page_size",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Page Size",
            "x-ms-visibility": "advanced"
          },
          {
            "default": 1,
            "description": "Represent the page numbers (offset). For use with pagination.",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Page Number",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "properties": {
                "nextlink": {
                  "description": "URL for the next page set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Next results URL"
                },
                "previouslink": {
                  "description": "URL for the previous set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Previous results URL"
                },
                "total": {
                  "description": "Total records for the given filters",
                  "format": "int32",
                  "type": "integer",
                  "x-ms-summary": "Total Records"
                },
                "value": {
                  "description": "List of records of a record returned for the given filters.",
                  "items": {
                    "$ref": "#/definitions/v1.RecordApi.RecordRead"
                  },
                  "type": "array",
                  "x-ms-summary": "Records"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "List records",
        "tags": [
          "Record"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextlink"
        }
      },
      "post": {
        "description": "Creates a new record.",
        "operationId": "CreateRecord",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.RecordAdd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.RecordRead"
            }
          }
        },
        "summary": "Create a record",
        "tags": [
          "Record"
        ]
      }
    },
    "/v1/profiles/{id}": {
      "get": {
        "description": "Returns information about a record.",
        "operationId": "GetRecord",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a record.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.RecordRead"
            }
          }
        },
        "summary": "Get a record",
        "tags": [
          "Record"
        ]
      },
      "patch": {
        "description": "Updates a record.",
        "operationId": "UpdateRecord",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a record.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.RecordEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.RecordRead"
            }
          }
        },
        "summary": "Update a record",
        "tags": [
          "Record"
        ]
      }
    },
    "/v1/profiles/{record_id}/email_addresses": {
      "get": {
        "description": "Returns a list of email addresses for a record.",
        "operationId": "ListRecordEmailAddresses",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a record.",
            "format": "int32",
            "in": "path",
            "name": "record_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "description": "Search for primary email.",
            "in": "query",
            "name": "is_primary",
            "required": false,
            "type": "boolean",
            "x-ms-summary": "Is Primary?",
            "x-ms-visibility": "advanced"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          },
          {
            "default": 50,
            "description": "Represents the number of records to return. The default is 10. The maximum is 50.",
            "format": "int32",
            "in": "query",
            "maximum": 50,
            "minimum": 1,
            "name": "page_size",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Page Size",
            "x-ms-visibility": "advanced"
          },
          {
            "default": 1,
            "description": "Represent the page numbers (offset). For use with pagination.",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Page Number",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "properties": {
                "nextlink": {
                  "description": "URL for the next page set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Next results URL"
                },
                "previouslink": {
                  "description": "URL for the previous set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Previous results URL"
                },
                "total": {
                  "description": "Total email addresses for the given filters",
                  "format": "int32",
                  "type": "integer",
                  "x-ms-summary": "Total Email Addresses"
                },
                "value": {
                  "description": "List of email address of a record returned for the given filters. The results are paginated.\n",
                  "items": {
                    "$ref": "#/definitions/v1.RecordApi.EmailAddressRead"
                  },
                  "type": "array",
                  "x-ms-summary": "Email Address"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "List email addresses of a record",
        "tags": [
          "Email Address"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextlink"
        }
      },
      "post": {
        "description": "Creates a new email address for a record.",
        "operationId": "CreateRecordEmailAddress",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a record.",
            "format": "int32",
            "in": "path",
            "name": "record_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.EmailAddressAdd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.EmailAddressRead"
            }
          }
        },
        "summary": "Create an email address for a record",
        "tags": [
          "Email Address"
        ]
      }
    },
    "/v1/profiles/{record_id}/email_addresses/{email_id}": {
      "delete": {
        "description": "Delete an email address of a record.",
        "operationId": "DeleteRecordEmailAddress",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a record.",
            "in": "path",
            "name": "record_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single"
          },
          {
            "description": "System generated ID to uniquely identify a email address of a record.",
            "in": "path",
            "name": "email_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "Returned when the operation succeeds."
          }
        },
        "summary": "Delete an email address of a record",
        "tags": [
          "Email Address"
        ]
      },
      "get": {
        "description": "Returns information about an email address of a record.",
        "operationId": "GetRecordEmailAddress",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a record.",
            "in": "path",
            "name": "record_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single"
          },
          {
            "description": "System generated ID to uniquely identify a email address of a record.",
            "in": "path",
            "name": "email_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.EmailAddressRead"
            }
          }
        },
        "summary": "Get an email address of a record",
        "tags": [
          "Email Address"
        ]
      },
      "patch": {
        "description": "Updates the fields the email address of a record",
        "operationId": "UpdateRecordEmailAddress",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a record.",
            "in": "path",
            "name": "record_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Record ID",
            "x-ms-url-encoding": "single"
          },
          {
            "description": "System generated ID to uniquely identify a email address of a record.",
            "in": "path",
            "name": "email_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Email Address ID",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.EmailAddressEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.RecordApi.EmailAddressRead"
            }
          }
        },
        "summary": "Update an email address of a record",
        "tags": [
          "Email Address"
        ]
      }
    },
    "/v1/eventsx/metadata/webhook_events/": {
      "get": {
        "description": "Get a list of all the supported events",
        "operationId": "GetEventMetadataWebhookEvents",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of webhook events available",
        "tags": [
          "Metadata"
        ],
        "x-ms-trigger": "batch",
        "x-ms-visibility": "internal"
      }
    },
    "/v1/eventsx/registrations/metadata/webhook_events/": {
      "get": {
        "description": "Get a list of all the registrations",
        "operationId": "GetregistrationMetadataWebhookEvents",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of webhook registration",
        "tags": [
          "Metadata"
        ],
        "x-ms-visibility": "internal"
      }
    },
    "/v1/eventsx/tickets/metadata/webhook_events/": {
      "get": {
        "description": "Get a list of all supported events",
        "operationId": "GetTicketMetadataWebhookEvents",
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of webhook events available",
        "tags": [
          "Metadata"
        ],
        "x-ms-trigger": "batch",
        "x-ms-visibility": "internal"
      }
    },
    "/v1/virtual/webhooks/eventsx.eventx/": {
      "post": {
        "description": "Triggers when an Event is submitted or an existing event is updated.",
        "operationId": "EventCreateOrUpdateWebhook",
        "parameters": [
          {
            "description": "Create a webhook to receive Event data when a Event is submitted on Almabase.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EventApi.EventCreatedOrUpdatedWebhookRequest"
            },
            "x-ms-summary": "Create Event Entry Webhook"
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "type": "object"
            }
          }
        },
        "summary": "When an event is created or an existing event is updated",
        "x-ms-trigger": "batch",
        "x-ms-trigger-hint": "To see it work, create an event or update an existing event on Almabase"
      },
      "x-ms-notification-content": {
        "description": "Schems for event create/update webhook.",
        "schema": {
          "$ref": "#/definitions/v1.EventApi.EventWebhookResponse"
        }
      }
    },
    "/v1/virtual/webhooks/eventsx.eventxticket/": {
      "post": {
        "description": "Triggers when an Event ticket is submitted or an existing event ticket is updated.",
        "operationId": "TicketCreateOrUpdateWebhook",
        "parameters": [
          {
            "description": "Create a webhook to receive Event data when a Event ticket is submitted on Almabase.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EventApi.TicketCreatedOrUpdatedWebhookRequest"
            },
            "x-ms-summary": "Create ticket Entry Webhook"
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "type": "object"
            }
          }
        },
        "summary": "When a Ticket is created or an existing Ticket is updated",
        "x-ms-trigger": "single",
        "x-ms-trigger-hint": "To see it work, create an event ticket or update an existing event ticket on Almabase"
      },
      "x-ms-notification-content": {
        "description": "Schems for event ticket create/update webhook.",
        "schema": {
          "$ref": "#/definitions/v1.EventApi.TicketWebhookResponse"
        }
      }
    },
    "/v1/virtual/webhooks/eventsx.registration/": {
      "post": {
        "description": "Triggers when an Event registration is submitted or an existing event registration is updated.",
        "operationId": "RegistrationCreateOrUpdateWebhook",
        "parameters": [
          {
            "description": "Create a webhook to receive Event data when a Event registration is submitted on Almabase.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EventApi.RegistrationCreatedOrUpdatedWebhookRequest"
            },
            "x-ms-summary": "Create registration Entry Webhook"
          }
        ],
        "responses": {
          "201": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "type": "object"
            }
          }
        },
        "summary": "When a registration is created or an existing registration is updated",
        "x-ms-trigger": "single",
        "x-ms-trigger-hint": "To see it work, create an event registration or update an existing event registration on Almabase"
      },
      "x-ms-notification-content": {
        "description": "Schems for event registration create/update webhook.",
        "schema": {
          "$ref": "#/definitions/v1.EventApi.RegistrationWebhookEvents"
        }
      }
    },
    "/v1/eventsx/": {
      "get": {
        "description": "Returns a list of all the events.",
        "operationId": "ListEvents",
        "parameters": [
          {
            "description": "Search for events by external database ID.",
            "in": "query",
            "name": "external_database_id",
            "required": false,
            "type": "string",
            "x-ms-summary": "Search By External Database Id",
            "x-ms-visibility": "advanced"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.EventApi.EventRead"
              },
              "type": "array"
            }
          }
        },
        "summary": "List Events",
        "tags": [
          "Event"
        ]
      },
      "post": {
        "description": "Creates a new event.",
        "operationId": "CreateEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EventApi.EventAdd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.EventApi.EventRead"
            }
          }
        },
        "summary": "Create an event",
        "tags": [
          "Event"
        ]
      }
    },
    "/v1/eventsx/{event_id}/guests/{id}/": {
      "patch": {
        "description": "Updates guest registration for an event on Almabase",
        "operationId": "UpdateEventGuests",
        "parameters": [
          {
            "description": "The guest associated almabase Event Id.",
            "in": "path",
            "name": "event_id",
            "required": true,
            "type": "string",
            "x-ms-summary": "Event ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "description": "guest ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "x-ms-summary": "Event guest ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "description": "body of the guest",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/v1.EventsApi.GuestEdit"
            },
            "x-ms-summary": "Guest body"
          }
        ],
        "responses": {
          "200": {
            "description": "Success Response",
            "schema": {
              "$ref": "#/definitions/v1.EventsApi.GuestRead"
            }
          }
        },
        "summary": "Update guest registrants for an event on Almabase",
        "tags": [
          "guest"
        ]
      }
    },
    "/v1/eventsx/{event_id}/registration/": {
      "get": {
        "deprecated": false,
        "description": "List event registrations",
        "operationId": "listEventRegistration",
        "parameters": [
          {
            "description": "Unique Event ID",
            "in": "path",
            "name": "event_id",
            "required": true,
            "type": "string",
            "x-ms-summary": "Event ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success Response",
            "schema": {
              "properties": {
                "nextlink": {
                  "description": "URL for the next page set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Next results URL"
                },
                "previouslink": {
                  "description": "URL for the previous set of results. For use with pagination.",
                  "format": "uri",
                  "type": "string",
                  "x-ms-summary": "Previous results URL"
                },
                "total": {
                  "description": "Total registrations for the given filters",
                  "format": "int32",
                  "type": "integer",
                  "x-ms-summary": "Total registrations"
                },
                "value": {
                  "description": "List of registrations returned for the given filters. The results are paginated.",
                  "items": {
                    "$ref": "#/definitions/v1.EventsApi.RegistrationRead"
                  },
                  "type": "array",
                  "x-ms-summary": "Registrations"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "List event registrations",
        "tags": [
          "Registration"
        ]
      }
    },
    "/v1/eventsx/{event_id}/registrations/tickets/{id}/": {
      "patch": {
        "description": "Update ticket purchased",
        "operationId": "updateEventTicketBought",
        "parameters": [
          {
            "description": "Event ID of the Ticket that is purchased",
            "in": "path",
            "name": "event_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Event ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "description": "ID of purchase of Ticket",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Ticket ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "description": "body of the tickets bought",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "external_database_id": {
                  "description": "External guest ID to uniquely identify a participant fee on RENXT events.",
                  "type": "string",
                  "x-ms-summary": "RENXT participant fee ID",
                  "x-ms-visibility": "important"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success Response",
            "schema": {
              "type": "object"
            }
          }
        },
        "summary": "Update purchased ticket",
        "tags": [
          "Registrations"
        ]
      }
    },
    "/v1/eventsx/{event_id}/registrations/{id}/": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "deprecated": false,
        "description": "Update event registration",
        "operationId": "updateEventRegistration",
        "parameters": [
          {
            "description": "Almabase event ID",
            "in": "path",
            "name": "event_id",
            "required": true,
            "type": "string",
            "x-ms-description": "Almabase event ID",
            "x-ms-summary": "event ID",
            "x-ms-url-encoding": "single"
          },
          {
            "description": "Registration ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "x-ms-description": "Registration ID",
            "x-ms-summary": "ID",
            "x-ms-url-encoding": "single"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EventsApi.RegistrationEdit"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success Response",
            "schema": {
              "$ref": "#/definitions/v1.EventsApi.RegistrationRead"
            }
          }
        },
        "summary": "Update event registration",
        "tags": [
          "Registrations"
        ]
      }
    },
    "/v1/eventsx/{event_id}/tickets/": {
      "get": {
        "deprecated": false,
        "description": "List event tickets",
        "operationId": "listEventTickets",
        "parameters": [
          {
            "description": "Event ID",
            "in": "path",
            "name": "event_id",
            "required": true,
            "type": "string",
            "x-ms-description": "Event ID",
            "x-ms-summary": "Event ID",
            "x-ms-url-encoding": "single"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          },
          {
            "description": "A page number within the paginated result set.",
            "format": "int32",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer",
            "x-ms-description": "A page number within the paginated result set.",
            "x-ms-summary": "page number"
          },
          {
            "description": "Number of results to return per page.",
            "format": "int32",
            "in": "query",
            "name": "page_size",
            "required": false,
            "type": "integer",
            "x-ms-description": "Number of results to return per page.",
            "x-ms-summary": "page_size"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success Response",
            "schema": {
              "properties": {
                "count": {
                  "example": 123,
                  "format": "int32",
                  "type": "integer"
                },
                "next": {
                  "example": "http://api.example.org/accounts/?page=4",
                  "type": "string"
                },
                "previous": {
                  "example": "http://api.example.org/accounts/?page=2",
                  "type": "string"
                },
                "value": {
                  "items": {
                    "$ref": "#/definitions/v1.EventsApi.EventTicketRead"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "List event tickets",
        "tags": [
          "Tickets"
        ],
        "x-ms-description": "List event tickets",
        "x-ms-summary": "List event tickets"
      }
    },
    "/v1/eventsx/{event_id}/tickets/{id}/": {
      "patch": {
        "description": "Update event ticket",
        "operationId": "UpdateEventTicket",
        "parameters": [
          {
            "description": "The Ticket associated almabase Event Id.",
            "in": "path",
            "name": "event_id",
            "required": true,
            "type": "string",
            "x-ms-summary": "Event ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "description": "Ticket ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "x-ms-summary": "Event Ticket ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "description": "body of the ticket",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/v1.EventsApi.TicketEdit"
            },
            "x-ms-summary": "Ticket"
          }
        ],
        "responses": {
          "200": {
            "description": "Success Response",
            "schema": {
              "$ref": "#/definitions/v1.EventsApi.TicketRead"
            }
          }
        },
        "summary": "Update event ticket",
        "tags": [
          "Tickets"
        ]
      }
    },
    "/v1/eventsx/{id}/": {
      "get": {
        "description": "Returns information about a event.",
        "operationId": "GetEvent",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify a event.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Event ID",
            "x-ms-url-encoding": "single"
          },
          {
            "collectionFormat": "csv",
            "description": "The comma seperated list of fields in the response.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "required": false,
            "type": "array",
            "x-ms-summary": "Fields",
            "x-ms-visibility": "advanced"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.EventApi.EventRead"
            }
          }
        },
        "summary": "Get an event",
        "tags": [
          "Event"
        ]
      },
      "patch": {
        "description": "Updates an event.",
        "operationId": "UpdateEvent",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify an event.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Event ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EventApi.EventEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.EventApi.EventRead"
            }
          }
        },
        "summary": "Update an event",
        "tags": [
          "Event"
        ]
      }
    },
    "/v1/eventsx/{id}/contact_persons/": {
      "get": {
        "description": "Returns a list of all the contact persons on an event.",
        "operationId": "ListEventContactPersons",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify an event.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Event ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.EventApi.ContactPersonRead"
              },
              "type": "array"
            }
          }
        },
        "summary": "List Contact Persons",
        "tags": [
          "Event"
        ]
      },
      "post": {
        "description": "Adds a contact person to an event.",
        "operationId": "AddEventContactPerson",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify an event.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Event ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EventApi.ContactPersonEditOrAdd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.EventApi.ContactPersonRead"
            }
          }
        },
        "summary": "Add a contact person",
        "tags": [
          "Event"
        ]
      }
    },
    "/v1/eventsx/{id}/contact_persons/{person_id}/": {
      "patch": {
        "description": "Updates a contact person on an event.",
        "operationId": "UpdateEventContactPerson",
        "parameters": [
          {
            "description": "System generated ID to uniquely identify an event.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Event ID",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "description": "System generated ID to uniquely identify a contact person on an event.",
            "format": "int32",
            "in": "path",
            "name": "person_id",
            "required": true,
            "type": "integer",
            "x-ms-summary": "Event Contact Person Id",
            "x-ms-url-encoding": "single",
            "x-ms-visibility": "important"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EventApi.ContactPersonEditOrAdd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned when the operation succeeds.",
            "schema": {
              "$ref": "#/definitions/v1.EventApi.ContactPersonRead"
            }
          }
        },
        "summary": "Update a contact person",
        "tags": [
          "Event"
        ]
      }
    },
    "/v1/webhooks/{webhook_id}/": {
      "delete": {
        "summary": "Delete webhook",
        "description": "Delete a webhook associated with a flow",
        "operationId": "DeleteWebhook",
        "tags": [
          "Webhook"
        ],
        "x-ms-visibility": "internal",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "System generated ID to uniquely identify a webhook.",
            "x-ms-summary": "Webhook ID",
            "x-ms-url-encoding": "single"
          }
        ],
        "responses": {
          "204": {
            "description": "Returned when the operation succeeds."
          }
        }
      }
    }
  }
}